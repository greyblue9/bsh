
import java.io.IOException;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.*;
// Generator
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import org.objectweb.asm.Opcodes;

/**
 * Generates classes designed so that the "conform" test suite, applied to these
 * classes, covers all the ASM code base.
 * 
 * @author Eric Bruneton
 */
public class Generator implements Opcodes {

  public static void main(String[] args) throws IOException {
    Generator[] generators = {
      new Annotation(),
      new Attribute(),
      new Debug(),
      new Enum(),
      new Frames(),
      new Insns(),
      new Interface(),
      new JSR(),
      new Outer(),
      new Wide() };
    for (int i = 0; i < generators.length; ++i) {
      generators[i].generate(args[0]);
    }
  }

  protected void generate(String dir) throws IOException {
  }
  
  
  protected void generate(String dir, String path, byte[] clazz)
    throws IOException
  {
    File f = new File(new File(dir), path);
    f.getParentFile().mkdirs();
    FileOutputStream o = new FileOutputStream(f);
    o.write(clazz);
    o.close();
  }
}

/**
 * Generates an enum class.
 * 
 * @author Eric Bruneton
 */
public class EnumGen extends Generator  {
  
  private String fqClsNameWithSlashes = "test.TestEnum";
  
  public String[] names = new String[]{ "V0", "V1", "V2" };
  
  
  public String setClassName(String name) {
    fqClsNameWithSlashes = name.replace(".", "/");
    return fqClsNameWithSlashes;
  }
  
  public String getClassName() {
    return fqClsNameWithSlashes;
  }
  
  public void generate(String dir) throws IOException {
    generate(dir, fqClsNameWithSlashes + ".class", dump());
  }

  public byte[] dump() {
    ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
    FieldVisitor fv;
    MethodVisitor mv;

    cw.visit(
      V1_5,
      ACC_PUBLIC + ACC_FINAL + ACC_SUPER + ACC_ENUM,
      fqClsNameWithSlashes,
      "Ljava/lang/Enum<L"+ fqClsNameWithSlashes + ";>;",
      "java/lang/Enum",
      null
    );
      
    for (String name: names) {
      fv = cw.visitField(
        ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM,
        name,
        "L"+ fqClsNameWithSlashes + ";",
        null,
        null
      );
      fv.visitEnd();
    }
    /* 
    fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM,
      "V0",
      "L"+ fqClsNameWithSlashes + ";",
      null,
      null);
    fv.visitEnd();

    fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM,
      "V1",
      "L"+ fqClsNameWithSlashes + ";",
      null,
      null);
    fv.visitEnd();
    
    fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM,
      "V2",
      "L"+ fqClsNameWithSlashes + ";",
      null,
      null);
    fv.visitEnd();
    */
    fv = cw.visitField(
      ACC_PRIVATE + ACC_FINAL + ACC_STATIC + ACC_SYNTHETIC,
      "$VALUES",
      "[L"+ fqClsNameWithSlashes + ";",
      null,
      null);
    fv.visitEnd();
    
    
    
    mv = cw.visitMethod(
      ACC_PUBLIC + ACC_FINAL + ACC_STATIC,
      "values",
      "()[L"+ fqClsNameWithSlashes + ";",
      null,
      null
    );
      
    mv.visitCode();
    
    mv.visitFieldInsn(
      GETSTATIC, 
      fqClsNameWithSlashes, 
      "$VALUES", 
      "[L"+ fqClsNameWithSlashes + ";"
    );
    mv.visitMethodInsn(
      INVOKEVIRTUAL,
      "[L"+ fqClsNameWithSlashes + ";",
      "clone",
      "()Ljava/lang/Object;"
    );
    mv.visitTypeInsn(
      CHECKCAST, 
      "[L"+ fqClsNameWithSlashes + ";"
    );
    mv.visitInsn(ARETURN);
    mv.visitMaxs(0, 0);
    mv.visitEnd();





    mv = cw.visitMethod(
      ACC_PUBLIC + ACC_STATIC,
      "valueOf",
      "(Ljava/lang/String;)L"+ fqClsNameWithSlashes + ";",
      null,
      null
    );
    
    mv.visitCode();
    mv.visitLdcInsn(Type.getType("L"+ fqClsNameWithSlashes + ";"));
    mv.visitVarInsn(ALOAD, 0);
    mv.visitMethodInsn(INVOKESTATIC,
      "java/lang/Enum",
      "valueOf",
      "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
    mv.visitTypeInsn(CHECKCAST, fqClsNameWithSlashes );
    mv.visitInsn(ARETURN);
    mv.visitMaxs(0, 0);
    mv.visitEnd();

    mv = cw.visitMethod(ACC_PRIVATE,
      "<init>",
      "(Ljava/lang/String;I)V",
      "()V",
      null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD, 0);
    mv.visitVarInsn(ALOAD, 1);
    mv.visitVarInsn(ILOAD, 2);
    mv.visitMethodInsn(INVOKESPECIAL,
      "java/lang/Enum",
      "<init>",
      "(Ljava/lang/String;I)V");
    mv.visitInsn(RETURN);
    mv.visitMaxs(0, 0);
    mv.visitEnd();

    mv = cw.visitMethod(
      ACC_STATIC, "<clinit>", "()V", null, null
    );
    mv.visitCode();
    mv.visitTypeInsn(NEW, fqClsNameWithSlashes );
    mv.visitInsn(DUP);
    mv.visitLdcInsn("V0");
    mv.visitInsn(ICONST_0);
    mv.visitMethodInsn(INVOKESPECIAL,
      fqClsNameWithSlashes ,
      "<init>",
      "(Ljava/lang/String;I)V");
    mv.visitFieldInsn(
      PUTSTATIC, 
      fqClsNameWithSlashes, 
      "V0", 
      "L"+ fqClsNameWithSlashes + ";"
    );
    mv.visitTypeInsn(NEW, fqClsNameWithSlashes );
    mv.visitInsn(DUP);
    mv.visitLdcInsn("V1");
    mv.visitInsn(ICONST_1);
    mv.visitMethodInsn(
      INVOKESPECIAL,
      fqClsNameWithSlashes ,
      "<init>",
      "(Ljava/lang/String;I)V");
      
    mv.visitFieldInsn(
      PUTSTATIC, 
      fqClsNameWithSlashes,  
      "V1", 
      "L"+ fqClsNameWithSlashes + ";"
    );
    
    mv.visitTypeInsn(NEW, fqClsNameWithSlashes );
    mv.visitInsn(DUP);
    mv.visitLdcInsn("V2");
    mv.visitInsn(ICONST_2);
    mv.visitMethodInsn(INVOKESPECIAL,
      fqClsNameWithSlashes ,
      "<init>",
      "(Ljava/lang/String;I)V");
      
    mv.visitFieldInsn(PUTSTATIC, fqClsNameWithSlashes , "V2", "L"+ fqClsNameWithSlashes + ";");
    mv.visitInsn(ICONST_3);
    mv.visitTypeInsn(ANEWARRAY, fqClsNameWithSlashes );
    mv.visitInsn(DUP);
    mv.visitInsn(ICONST_0);
    
    
    mv.visitFieldInsn(GETSTATIC, fqClsNameWithSlashes , "V0", "L"+ fqClsNameWithSlashes + ";");
    mv.visitInsn(AASTORE);
    mv.visitInsn(DUP);
    mv.visitInsn(ICONST_1);
    mv.visitFieldInsn(GETSTATIC, fqClsNameWithSlashes , "V1", "L"+ fqClsNameWithSlashes + ";");
    mv.visitInsn(AASTORE);
    mv.visitInsn(DUP);
    mv.visitInsn(ICONST_2);
    mv.visitFieldInsn(GETSTATIC, fqClsNameWithSlashes , "V2", "L"+ fqClsNameWithSlashes + ";");
    mv.visitInsn(AASTORE);
    mv.visitFieldInsn(PUTSTATIC, fqClsNameWithSlashes , "$VALUES", "[L"+ fqClsNameWithSlashes + ";");
    mv.visitInsn(RETURN);
    mv.visitMaxs(0, 0);
    mv.visitEnd();

    cw.visitEnd();

    return cw.toByteArray();
  }
}


public static Class genEnum() {
  return genEnum("org.d6r.EnumTest");
}

public static Class genEnum(String className) {
  return genEnum(className, null);
}

public static Class genEnum(String className, String[] enumValues) {


  String dirPath = "/data/media/0/out";
  String relPath = className.replace('.', '/') + ".class";
  String classFilePath = dirPath + "/" + relPath;
  
  EnumGen eg = new EnumGen(); 
  eg.setClassName(className);
  eg.generate(dirPath); 
  
  byte[] classBytes = readbytes(classFilePath);
  
  try {
      this.interpreter.getErr().println(String.format(
      "Read `%s' [%s bytes]",
      classFilePath,
      classBytes.length
    ));
  } catch (Throwable e) { }
    
  AndroidClassLoader acl = new AndroidClassLoader(new URL[] { }); 
  return acl.defineClass(className, classBytes);
    
}






