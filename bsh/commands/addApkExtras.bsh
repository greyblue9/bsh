
public static Map addApkExtras(byte[] apkBytes, Map rmExtra) { System.err.printf("Adding remaining assets and resources except certificate/signature files ...\n"); Map rmExtra0 = RealArrayMap.toMap(ZipUtil.mapStrings(new java.util.zip.ZipInputStream(new ByteArrayInputStream(apkBytes)), java.nio.charset.Charset.forName("UTF-8"), TreeMap.class, Pattern.compile("^.+/((?:(?![^/]+\\.(?:xml|arsc|dex)|CERT\\..+)[^/])+)$", Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).entrySet().select(FunctionUtil.eval("return m -> { Pair.of(m.getKey(), m.getValue().getBytes(\"UTF-8\")); }"))); rmExtra.putAll(rmExtra0); if (rmExtra.containsKey("META-INF/MANIFEST.MF")) { System.err.printf("Found manifest!\n  - Cleansing manifest of signatures, digests, etc ...\n"); Object item = rmExtra.get("META-INF/MANIFEST.MF"); String manifContent = (item instanceof byte[])? IOUtils.toString((byte[]) item): (String) item; NumberedLines manifLines = new NumberedLines(manifContent); List lineMapEntries = new ArrayList(manifLines.getLineMap().entrySet()), lmEntriesToRemove = CollectionUtil2.filter(lineMapEntries, Pattern.compile("^[0-9]+ ?[^ ] ?([^-]+-(?:Digest|Hash|Sum|Checksum)|Name):[\t ]", Pattern.CASE_INSENSITIVE | Pattern.DOTALL)); lineMapEntries.removeAll(lmEntriesToRemove); Map manifMap = new TreeMap(); manifMap.putAll(RealArrayMap.toMap(lineMapEntries)); System.err.printf("Composing distilled manifest (%d lines) ...\n", lineMapEntries.size()); String newManifStr = Pattern.compile("(\n[\r\t ]*){3,}", Pattern.CASE_INSENSITIVE | Pattern.DOTALL | Pattern.MULTILINE | Pattern.UNIX_LINES).matcher(StringUtils.join(manifMap.values(), '\n')).replaceAll("\n"); rmExtra.put("META-INF/MANIFEST.MF", newManifStr.getBytes("UTF-8")); }; System.err.printf("Extras done!\n"); return rmExtra; }

public static Map addApkExtras(byte[] apkBytes) { return addApkExtras(apkBytes, new TreeMap()); }

