
public static StringBuilder appendType(StringBuilder sb, Type type) { if (type instanceof Class) { Class cls = (Class) type; Type[] tvs = cls.getTypeParameters(); if (tvs.length == 0) return sb.append(ClassInfo.typeToName(cls.getName()).replace('$', '.')); ParameterizedType ptype = org.apache.commons.lang3.reflect.TypeUtils.parameterize(cls, tvs); return appendType(sb, ptype); };  if (! (type instanceof ParameterizedType)) { return sb.append(type); }; ParameterizedType pt = (ParameterizedType) type; Type rawType = pt.getRawType(); sb.append(ClassInfo.typeToName(rawType instanceof Class? ((Class) rawType).getName(): rawType.toString()).replace('$', '.')).append("<"); Type[] tps = pt.getActualTypeArguments(); for (int p=0, plen=tps.length; p<plen; ++p) { if (p != 0) sb.append(", "); Type tp = tps[p]; if (tp instanceof TypeVariable) { TypeVariable tv = (TypeVariable) tp; Type[] bounds = tv.getBounds(); for (int i=0, len=bounds.length; i<len; ++i) { Type bound = bounds[i]; if (i != 0) sb.append(", "); sb.append(tp); if (bound instanceof ParameterizedType && ((ParameterizedType)bound).getActualTypeArguments()[0] instanceof TypeVariable && ((ParameterizedType)bound).getRawType() == ((ParameterizedType)bound).getActualTypeArguments()[0].getBounds()[0].getRawType()) { sb.append(" extends ").append(bound.toString().replace('$', '.')); } else { if (bound != Object.class) { sb.append(" extends "); appendType(sb, bound); };  }; }; } else { appendType(sb, tp); } }; return sb.append(">"); };


