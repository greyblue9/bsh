
public static void assert(boolean cond) { if (!cond) { List env = CollectionUtil.clone(Arrays.asList(this, this.namespace, this.callstack.copy(), this.interpreter.get_jjtree()), new IdentityHashSet(), 0, 5); SimpleNode node = Reflect.getfldval(Reflect.getfldval(env[0], "namespace"), "callerInfoNode"); bsh.BSHArguments assertArgs = Reflector.invokeOrDefault(node, "findChild", bsh.BSHArguments.class); SimpleNode assertExpr = Array.get(Reflect.getfldval(assertArgs, "children"), 0); String exprText = Reflector.invokeOrDefault(Reflector.invokeOrDefault(assertExpr, "jjtGetParent"), "getText"); String msg; AssertionError ae = new AssertionError(msg = String.format("\n\n\u001b[1;41;37m" + String.format("%-67s","*** ASSERTION VIOLATED ***") + "\u001b[0m\n\n      \u001b[1;33m%s\u001b[0m\n    \u001b[1;31m%s\u001b[0m\n", exprText, Reflector.invokeOrDefault(node, "jjtGetParent"))); EvalError ee = new EvalError(msg, node, env[2], ae); ee.getData().put("this", env[0]); ee.getData().put("namespace", env[1]); ee.getData().put("callstack", env[2]); ee.put("jjtree", env[3]); new Thread(new Runnable() { public void run() { Thread.sleep(250); org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseStackTrace(ee).print(); System.err.printf("\n\n%s", dumpMembers.colorize(this.interpreter.getBshPrompt(), "1;44;32")); } }).start(); Reflector.Util.sneakyThrow(ee);  }; };

