public static String attrToString(javassist.bytecode.InnerClassesAttribute ica) { StringBuilder sb = new StringBuilder(76 * 10); int attrLen = ica.length(), numEntries = ica.tableLength(); String attrName = ica.getName(); byte[] attrBytes = ica.get(); sb.append(String.format("\u001b[1;31m=== %s Attribute ===\u001b[0m\n  data length: %d bytes\n  raw data:\n%s\n\n", attrName, attrLen, Pattern.compile("(^|\n)").matcher(hexDump(attrBytes)).replaceAll("  "))); for (int i=0; i<numEntries; ++i) { String innerClass = ica.innerClass(i), innerName = ica.innerName(i), outerClass = ica.outerClass(i); int innerClassIndex = ica.innerClassIndex(i), innerNameIndex = ica.innerNameIndex(i), outerClassIndex = ica.outerClassIndex(i), accessFlags = ica.accessFlags(i); sb.append(String.format("  \u001b[5;35m## Entry[%d] (%d of %d): ##\u001b[0m\n    innerClass:  \u001b[1;44;36m%s\u001b[0m  \u001b[1;30m<str. #\u001b[0m%d\u001b[1;30m>\u001b[0m\n    outerClass:  \u001b[1;36m%s\u001b[0m  \u001b[1;30m<str. #\u001b[0m%d\u001b[1;30m>\u001b[0m\n    innerName:   \u001b[1;32m%s\u001b[0m  \u001b[1;30m<str. #\u001b[0m%d\u001b[1;30m>\u001b[0m\n    accessFlags: \u001b[1;33m%d\u001b[0m \u001b[1;30m(%s)\u001b[0m\n", i, i+1, numEntries, innerClass, innerClassIndex, outerClass, outerClassIndex, innerName, innerNameIndex, accessFlags, Modifier.toString(accessFlags))); }; return sb.toString(); }


public static String attrToString(Class cls) { List<Throwable> errs = new ArrayList<Throwable>(); Collection<InnerClassesAttribute> icas = null; for (int attempt = 0; attempt < 2; attempt++) { try { CtClass ct = (attempt == 0)? CollectionUtil.getClassPool().get(cls.getName()): new CtClassType(org.cojen.classfile.TypeLoaderClassFileDataLoader.getDefault().getClassData(cls.getName()), CollectionUtil.getClassPool()); icas = CollectionUtil2.typeFilter(ct.getClassFile().getAttributes(), javassist.bytecode.InnerClassesAttribute.class); if (icas == null) { System.err.printf("[ERROR] Failed to create or read CtClass from class [%s]\n", cls.getName()); return ""; }; if (icas.isEmpty()) { System.err.printf("Class file for [%s] does not contain an InnerClass attribute.\n", cls.getName()); return ""; }; return attrToString((javassist.bytecode.InnerClassesAttribute) icas.iterator().next()); } catch (Throwable e) { System.err.printf("Error reading CtClass @ attempt %d: %s: %s\n", attempt+1, Reflector.getRootCause(e).getClass().getSimpleName(), Reflect.getfldval(Reflector.getRootCause(e), "detailMessage")); errs.add(e); continue; }; break; }; Throwable outer = new org.junit.internal.runners.model.MultipleFailureException(errs); Reflect.setfldval(outer, "cause", errs[0]); outer.addSuppressed(errs[1]); Reflect.setfldval(outer, "detailMessage", String.format("Unable to process attribute; on first attempt, got <%s: %s>; on second attempt, got <%s: %s>", Reflector.getRootCause(errs[0]).getClass().getSimpleName(), Reflector.getRootCause(errs[0]).getMessage(), Reflector.getRootCause(errs[1]).getClass().getSimpleName(), Reflector.getRootCause(errs[1]).getMessage())); throw Reflector.Util.sneakyThrow(outer); }

public static String attrToString(bsh.ClassIdentifier ci) { return attrToString((Class) ((bsh.ClassIdentifier) ci).getTargetClass()); }


