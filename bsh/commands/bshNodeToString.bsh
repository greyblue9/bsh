

public static String bshNodeToString(Object input) {
  bsh.SimpleNode firstNode = null; int lastKind = 0; String lastKindStr = ""; int kind = 0; String kindStr = "";
  bsh.Token firstToken = null;  if (input instanceof bsh.BshMethod) { firstNode = Reflect.get(input, "decl", "children", "0"); } else if (input instanceof bsh.BSHMethodDeclaration) { firstNode = Reflect.get(input, "children", "0"); } else if (input instanceof bsh.SimpleNode) { firstNode = Reflect.get(input, "children", "0"); } else { firstNode = null; firstToken = input; }; if (firstNode != null) firstToken = Reflect.get(firstNode, "firstToken"); else if (firstToken == null) throw new RuntimeException("No node or token"); String tokFmt = "%2$s"; List al = new ArrayList(); bsh.Token lastTok = null; bsh.Token curTok = firstToken; bsh.Token nextTok = firstToken.next; while (((lastTok = curTok).next) != null) { lastKind = kind; lastKindStr = kindStr; kindStr = bsh.Token.getKindString(kind = curTok.getKind());  if (ArrayUtils.contains(new int[]{ 75,82,40 }, lastKind) || kind==82) al.add(" ");  if (kindStr.equals("<identifier>") && (lastKind == kind || lastKind==85 || lastKind==83) && ! al.isEmpty()) { al.add(" "); };  if (kindStr.length() == 1) { s = kindStr.trim(); } else if (kind == 67) { s = String.format("\"%s\"", StringEscapeUtils.escapeJava(StringUtils.strip(curTok.image, String.valueOf(Character.toChars((char)0x22))))); } else { s = String.valueOf(curTok.image).trim(); };  al.add(String.format(tokFmt, kind,s).trim()); if (ArrayUtils.contains(new int[]{ 75,79,46,78, 85, 83, 30,32,23 }, curTok.getKind()) && al.get(al.size()-1).indexOf(" ") == -1) { al.add(kind==79||kind==46||kind==78||(kind > 20 && kind <35) ? al.size(): al.size()-1," "); }; if (kind == 76) { al.add(";"); al.add(" "); }; if (al.size() > 1200) break; else nextTok = (curTok = nextTok).next; };  return StringUtils.join(al, "");
};

