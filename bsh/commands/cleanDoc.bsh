; public static Document cleanDoc(org.jsoup.nodes.Document doc) { doc.select("style, script, link, meta, nav, object, embed, iframe, noscript, textarea, input, form, button").remove();  seen = new IdentityHashSet(); elem_lists = new ArrayList(); curelems = new ArrayList(); lastelem = null; for (elem: doc.select("code, pre, p")) { if (lastelem == null) lastelem = elem; else { last_next = lastelem.nextSibling(); while (last_next != null && !last_next.TAG.equals("Element")) last_next = last_next.nextSibling(); if (last_next != elem) { elem_lists.add(curelems); curelems = new ArrayList(); }; curelems.add(elem); lastelem = elem; }; }; blocks = new HashMap(); cur_block = new ArrayList(); prev_elem_list = null; for (elem_list: elem_lists) { if (elem_list.isEmpty()) continue; first_node = elem_list.get(0);  text = elem_list.select(FunctionUtil.bind("return m -> { m.text(); }")).join(" ").toString(); prev_last = prev_elem_list != null? prev_elem_list[-1]: null; cur_first = elem_list.get(0); adj = prev_last != null ? prev_last.parent(): null; if (adj != null && adj.nextSibling() != null && adj.nextSibling().nextSibling() != null) adj = adj.nextSibling().nextSibling(); adjacent = adj != null && adj.childNodes().contains(cur_first); if (!adjacent) { for(e: elem_list) { blocks.put(e, cur_block.join("\n").toString()); }; cur_block.clear(); }; cur_block.add(text); prev_last = cur_first; prev_elem_list = elem_list;  }; for(e: elem_list) { blocks.put(e, cur_block.join("\n").toString()); }; for (entry: IterableUtils.reversedIterable(blocks.entrySet())) { text = entry.getValue().replaceAll("[\u00c2\u00a0\uc2a0]", " "); System.err.printf("text = [%s]\n", text); newPreTag = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("pre"), doc.baseUri()); newPreTag.html(StringEscapeUtils.escapeHtml4(text)); System.err.printf("newPreTag = [%s]\n", newPreTag); replNode = entry.getKey(); if (replNode == null) continue; if (text.indexOf(";") == -1 && text.indexOf("{") == -1) continue; replNode.replaceWith(newPreTag); doc.reindexChildren(); }; doc.select("code").remove(); longest = getLongestElement(doc); int i = 0; for (node : doc.body().childNodes()) { if (i == 0) continue; node.remove(); };   return doc; };