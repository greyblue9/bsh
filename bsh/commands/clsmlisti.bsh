import java.nio.charset.StandardCharsets;

{
  public static boolean DEBUG = false;
  public static String TAG = "clsmlisti";
  
  
  public static String clsmlisti(String text) {
    bsh.Interpreter in = org.d6r.CollectionUtil.getInterpreter();
    bsh.BshBinding namespace = in.getNameSpace();
    bsh.Name bshName = new bsh.Name(namespace, text);
    bsh.CallStack stack = new bsh.CallStack(namespace);
    
    Object clObj = bshName.toObject(stack, in, true);
    Class cls = dumpMembers.getClass(clObj);
    String className = cls.getName();
    String ret = dumpDexClass2.dumpDexClass2(
      org.d6r.DexVisitor.from(cls), className, false
    );
    return ret;
  }
  
  public static void clsmlisti() {
    String text = System.getProperty("text");
    if (text == null) {
      BufferedReader br = new BufferedReader(
        new InputStreamReader(System.in, StandardCharsets.ISO_8859_1)
      );
      while (br.ready()) {
        String line = br.readLine();
        text = line.trim();
        break;
      }
    }
    if (DEBUG) Log.d("text = \"%s\"\n", StringEscapeUtils.escapeJava(text));
    String dump = clsmlisti(text);
    System.out.append(dump);
    System.exit((dump != null && dump.length() > 0)? 0: 1);
  };
  
  
  
  public static Pair<Thread__StackTraceElements> getMainThreadWithStack() {
    Map threadStacks = Thread.getAllStackTraces();
    Thread guess = null;
    for (Thread thread: threadStacks.keySet()) {
      if (! thread.getName().equals("main")) continue;
      else guess = thread;
      if (thread.getThreadGroup().getName().equals("main")) {
        return Pair.of(thread, threadStacks.get(thread));
      }
    }
    return (guess != null)
      ? Pair.of(guess, threadStacks.get(guess))
      : Pair.of(Thread.currentThread(), threadStacks.get(Thread.currentThread()));
  }
  
  public static List<String> getInterpreterMethodNames(StackTraceElement[] stes) {
    List<String> methodNames = StringUtils.join(CollectionUtil2.filter(
        stes, Pattern.compile("^bsh\\.Interpreter\\.([^(][^(]*)\\(").matcher("")
    ), "\n").matchAll("(?:^|(?<=\n))bsh\\.Interpreter\\.([^(][^(]*)\\(");
    Collections.reverse(methodNames);
    return methodNames;
  };
  
  public static Object INVTYPE_SCRIPT = Pair.of("source", "SCRIPT");
  public static Object INVTYPE_REPL = Pair.of("run", "REPL");
  public static Object INVTYPE_OTHER = Pair.of("", "OTHER");
  
  
  public static Object getBshInvocationTypeId() {
    Pair<Thread__StackTraceElements> mainThreadWithStack
      = getMainThreadWithStack();
    StackTraceElement[] stes = mainThreadWithStack.getValue();
    List<String> interpreterMethodNames = getInterpreterMethodNames(stes);
    Deque<String> names = new ArrayDeque<String>(interpreterMethodNames);
    
    while (!names.isEmpty() && names.peek().equals("main")) names.poll(); 
    String firstMethodCalledFromInterpreterMain = names.peek();
    for (Pair invtype: Arrays.asList(INVTYPE_SCRIPT, INVTYPE_REPL, INVTYPE_OTHER)) 
    {
      String invtype_methodName = invtype.getKey();
      Object invtype_id = invtype.getValue();
      if (invtype_methodName.isEmpty() ||
          invtype_methodName.equals(firstMethodCalledFromInterpreterMain))
      {
        return invtype;
      }
    }
    throw new AssertionError();
  }
  
  Object invtype = getBshInvocationTypeId();
  if (DEBUG) Log.d(TAG, "invtype_id = [%s]\n", invtype.getValue());
  if (invtype == INVTYPE_SCRIPT) {
    clsmlisti(); // if inside "main" script, like ` if __NAME__ == "main": ` in python
  }
  
}





