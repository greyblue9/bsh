



public static Quad decodeAXML() {  List<Pair> logs = new ArrayList<Pair>();  org.slf4j.Logger myLogger = new org.slf4j.Logger() { public Object invoke(String name, Object[] args) { logs.add(Pair.of(name, Arrays.asList(args))); StringBuilder sb = new StringBuilder(76 * 10); for (Object oarg: args) { if (sb.length()>0) sb.append(", "); sb.append(Debug.ToString(oarg)); }; System.err.printf(" -> LOG.%s(%s);\n", name, sb.toString()); if (name.indexOf("is") == 0) return Boolean.valueOf(true); if (name.equals("getName")) return "myLogger"; return null; } };        args = new JadxArgs((f = new File("/data/media/0/__xml_out")).getPath()); jadx.core.dex.nodes.RootNode.LOG = myLogger; jadx.core.dex.nodes.RootNode root = new jadx.core.dex.nodes.RootNode(args); jadx.api.JadxDecompiler.LOG = myLogger; jadx.api.JadxDecompiler dc = new jadx.api.JadxDecompiler(args); dc.loadFile(new File("/data/app/uk.co.weavr.BugReportReader-1.apk")); infile = new jadx.core.utils.files.InputFile(new File("/data/app/uk.co.weavr.BugReportReader-1.apk")); root.load(Arrays.asList(infile)); resfile = new jadx.api.ResourceFile(dc, "AndroidManifest.xml", jadx.api.ResourceType.XML); xmlp = new jadx.core.xmlgen.BinaryXMLParser(root); ZipFile zf = new ZipFile(infile.getFile()); InputStream is = zf.getInputStream(zf.getEntry("AndroidManifest.xml")); pstream = new jadx.core.xmlgen.ParserStream(is); xmlp.is = pstream; Map resIdMap = new TreeMap(); resIdMap.putAll(xmlp.styleMap); resIdMap.putAll(xmlp.localStyleMap); resIdMap.putAll(xmlp.resNames); valp = new jadx.core.xmlgen.entry.ValuesParser(new String[2000], resIdMap); xmlp.valuesParser = valp; Reflect.setfldval(jadx.core.codegen.CodeWriter.class, "INDENT", "  "); Reflect.setfldval(xmlp, "LOG", myLogger);      xmlp.writer = new jadx.core.codegen.CodeWriter();   xmlp.decode();  return Quad.of(xmlp, logs, root, xmlp.writer); }




public static Quad decodeAXML(File apkFile) {  List<Pair> logs = new ArrayList<Pair>();  org.slf4j.Logger myLogger = new org.slf4j.Logger() { public Object invoke(String name, Object[] args) { logs.add(Pair.of(name, Arrays.asList(args))); StringBuilder sb = new StringBuilder(76 * 10); for (Object oarg: args) { if (sb.length()>0) sb.append(", "); sb.append(Debug.ToString(oarg)); }; System.err.printf(" -> LOG.%s(%s);\n", name, sb.toString()); if (name.indexOf("is") == 0) return Boolean.valueOf(true); if (name.equals("getName")) return "myLogger"; return null; } };        args = new JadxArgs((f = new File("/data/media/0/__xml_out")).getPath()); jadx.core.dex.nodes.RootNode.LOG = myLogger; jadx.core.dex.nodes.RootNode root = new jadx.core.dex.nodes.RootNode(args); jadx.api.JadxDecompiler.LOG = myLogger; jadx.api.JadxDecompiler dc = new jadx.api.JadxDecompiler(args); dc.loadFile(apkFile); infile = new jadx.core.utils.files.InputFile(apkFile); root.load(Arrays.asList(infile)); resfile = new jadx.api.ResourceFile(dc, "AndroidManifest.xml", jadx.api.ResourceType.XML); xmlp = new jadx.core.xmlgen.BinaryXMLParser(root); ZipFile zf = new ZipFile(infile.getFile()); InputStream is = zf.getInputStream(zf.getEntry("AndroidManifest.xml")); pstream = new jadx.core.xmlgen.ParserStream(is); xmlp.is = pstream; Map resIdMap = new TreeMap(); resIdMap.putAll(xmlp.styleMap); resIdMap.putAll(xmlp.localStyleMap); resIdMap.putAll(xmlp.resNames); valp = new jadx.core.xmlgen.entry.ValuesParser(new String[2000], resIdMap); xmlp.valuesParser = valp; Reflect.setfldval(jadx.core.codegen.CodeWriter.class, "INDENT", "  "); Reflect.setfldval(xmlp, "LOG", myLogger);      xmlp.writer = new jadx.core.codegen.CodeWriter();   xmlp.decode();  return Quad.of(xmlp, logs, root, xmlp.writer); };



