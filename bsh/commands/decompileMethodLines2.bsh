import java.util.Map.Entry;


import com.strobel.decompiler.languages.java.ast.EntityDeclaration;
import com.strobel.assembler.metadata.MethodDefinition;
import com.strobel.assembler.ir.attributes.LineNumberTableAttribute;
import com.strobel.decompiler.languages.java.LineNumberTableConverter;
import com.strobel.decompiler.languages.java.ast.Expression;
import com.strobel.decompiler.languages.java.ast.Statement;
import com.strobel.decompiler.languages.java.ast.EntityDeclaration;
import com.strobel.decompiler.languages.java.ast.AstNode;
import com.strobel.assembler.metadata.MethodReference;
import com.strobel.decompiler.languages.java.ast.JavaModifierToken;
import com.strobel.decompiler.languages.java.ast.ParameterDeclaration;
import com.strobel.decompiler.languages.java.JavaOutputVisitor;
import com.strobel.decompiler.ITextOutput;
import com.strobel.decompiler.DecompilerSettings;
import com.strobel.decompiler.languages.LineNumberPosition;


public static Quad decompileMethodLines2(Member method) {  String text = "", ltext = "", letext = ""; String etext = ""; System.err.println("1"); com.strobel.assembler.metadata.MethodDefinition md = ProcyonUtil.getMethodDefinition(method); System.err.printf("MethodDefinition: %s ...\n", md); com.strobel.assembler.ir.attributes.LineNumberTableAttribute linenoAttr = CollectionUtil2.typeFilter(md.getSourceAttributes(), com.strobel.assembler.ir.attributes.LineNumberTableAttribute.class).iterator().next(); System.err.printf("LineNumberAttribute: %s ...\n", linenoAttr); com.strobel.decompiler.languages.java.LineNumberTableConverter conv = new com.strobel.decompiler.languages.java.LineNumberTableConverter(linenoAttr); System.err.printf("LineNumberConverter: %s ...\n", conv);  System.err.println("Decompiling ..."); CollectionUtil.getInterpreter().setu("conv", conv); com.strobel.decompiler.languages.java.ast.MethodDeclaration ast = ProcyonUtil.decompileToAst(md); System.err.printf("AST = %s ...\n", ast);   Collection stmts = ast.getBody().getDescendants().typeFilter(com.strobel.decompiler.languages.java.ast.AstNode.class); System.err.printf("# of AST Nodes: %d ...\n", stmts.size()); text = ast.getText();stmap = stmts.select(FunctionUtil.eval("""return m -> { Pair.of(m, conv.getLineForOffset(m.getOffset())); }""")); int index = -1; for (Entry e: stmap) { if (e.getKey() == null || Reflector.invokeOrDefault(e.getKey(), "getText") == null) continue;  String etext = String.valueOf(e.getKey().getText()).trim(); System.err.printf("%d :  %s\n", ++index, etext); if (etext == null || etext.equals("null")) { ;  continue; }; int lno = ((Integer) e.getValue()).intValue(); if (text == void || text == null || etext == void || etext == null) { continue; }; text = (text.indexOf(etext) != -1? StringUtils.substringBefore(text, etext) + String.format(" \u001b[1;31m%d\u001b[0m\u001b[0;31m(\u001b[0m%s\u001b[0;31m)\u001b[0m", lno, String.valueOf(etext).replaceAll("(.)", String.format("%c$1", 0x0d))) + StringUtils.substringAfter(text, String.valueOf(etext)): text);  ltext = text; letext = etext; }; return Quad.of(Pair.of(linenoAttr, conv), ast, stmap, text.replaceAll(String.format("%c", 0x0d), "").replace("   ", "  "));  }


public static String decompileMethodLines2(AstNode ast) {
  ITextOutput to = ProcyonUtil.newPlainTextOutput();
  DecompilerSettings ds = ProcyonUtil.getDecompilerSettings();
  JavaOutputVisitor v = new JavaOutputVisitor(to, ds);
  
  ast.acceptVisitor(v, null);
  NumberedLines nl = new NumberedLines(to.toString());
  SortedMap lm = new TreeMap();
  lm.putAll(nl.getLineMap());
  
  List lnops = new ArrayList(Arrays.asList(CollectionUtil.toArray(
    v.getLineNumberPositions()
  )));
  
  Set done = new TreeSet();
  int exLno = 0;
  List inserts = new ArrayList();
  int lastend = 0;
  String[] lns = nl.getLines();
  int[] lens = nl.getLengths();
  int[] lstarts = new int[lens.length];
  
  int total = 0;
    for (int i=0; i<lns.length; ++i) {
      lstarts[i] = total;
      total += lens[i] + 1;
    }
  
  
  Collections.sort(lnops, FunctionUtil.delegate(
    Comparator.class, 
      "return (a, b) -> { "
    + "  Integer.compare(a.getEmittedLine(), b.getEmittedLine());"
    + "}"
  ));
  
  for (LineNumberPosition lnop: lnops) {
    int astLno = lnop.getEmittedLine();
    // if (done.contains(astLno)) continue;
    done.add(astLno);
    if (astLno > lns.length) continue; 
    String etext = lns[astLno-1];
    int lno = lnop.getOriginalLine();
    int col = lnop.getEmittedColumn();
    int start = lstarts[astLno-1] + (col-1);
    int end = lstarts[astLno-1] + lens[astLno-1];
    /*System.err.printf(
      "@ line %d, col %d  [%d - %d]:\n%s\n",
      astLno, col,start, end, etext
    );*/
    
    inserts.add(Triple.of(
      start,
      start,
      String.format(
        (lno == exLno)
          ? "\u001b[1;41;37m%d \u001b[0;31m(\u001b[1;31m"
          : "\u001b[1;36m%d \u001b[0;36m(\u001b[0m",
        lno
      )
    ));
    
    inserts.add(Triple.of(
      end,
      end,
      (lno == exLno)
        ? "\u001b[0;31m)\u001b[0m"
        : "\u001b[0;36m)\u001b[0m"
    ));

    lastend = end;
    lm.put(
      lnop.getEmittedLine(),
      String.format(
        "\u001b[1;36m%4d\u001b[0m  %s", 
        lno, etext
      )
    );
    
    
  }
  String text = to.toString();
  
  
  Collections.sort(inserts, FunctionUtil.delegate(
    Comparator.class, 
      "return (a, b) -> { "
    + "  Integer.compare(a.getLeft(), b.getLeft());"
    + "}"
  ));
  
  StringBuilder sb = new StringBuilder(text.length() * 2);
  int lastend = 0;
  
  for (Triple p: inserts) {
    int start = p.getLeft();
    int end = p.getMiddle();
    String str = p.getRight();
    
    if (start > lastend) {
      sb.append(text.subSequence(lastend, start));
    }
    sb.append(str).append(text.subSequence(start, end));
      
    lastend = end;
  }
  sb.append(text.subSequence(lastend, text.length()));
  
  return sb.toString().replaceAll(
    String.format("%c", 0x0d), ""
  ); //.replace("    ", "  ");
  // return StringUtils.join(lm.values(), "\n");
}

