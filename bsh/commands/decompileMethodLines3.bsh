import java.util.Map.Entry;
public static Quad decompileMethodLines3(Member method) {  String text = "", ltext = "", letext = ""; String etext = ""; com.strobel.assembler.metadata.MethodDefinition md = ProcyonUtil.getMethodDefinition(method); System.err.printf("MethodDefinition: %s ...\n", md); com.strobel.assembler.ir.attributes.LineNumberTableAttribute linenoAttr = CollectionUtil2.typeFilter(md.getSourceAttributes(), com.strobel.assembler.ir.attributes.LineNumberTableAttribute.class).iterator().next(); System.err.printf("LineNumberAttribute: %s ...\n", linenoAttr); com.strobel.decompiler.languages.java.LineNumberTableConverter conv = new com.strobel.decompiler.languages.java.LineNumberTableConverter(linenoAttr); System.err.printf("LineNumberConverter: %s ...\n", conv);  System.err.println("Decompiling ..."); CollectionUtil.getInterpreter().setu("conv", conv); com.strobel.decompiler.languages.java.ast.MethodDeclaration ast = ProcyonUtil.decompileToAst(md); System.err.printf("AST = %s ...\n", ast);   Collection stmts = ast.getBody().getDescendants().typeFilter(com.strobel.decompiler.languages.java.ast.AstNode.class); System.err.printf("# of AST Nodes: %d ...\n", stmts.size()); text = ast.getBody().getText(); stmap = stmts.select(FunctionUtil.eval("""return m -> { Pair.of(m, conv.getLineForOffset(m.getOffset())); }""")); int index = -1; Set used = new TreeSet(); for (Entry e: stmap) { if (e.getKey() == null || Reflector.invokeOrDefault(e.getKey(), "getText") == null) continue;  String etext = String.valueOf(e.getKey().getText()).trim(); System.err.printf("%d :  %s\n", ++index, etext); if (etext == null)   continue; int lno = ((Integer) e.getValue()).intValue(); if (used.contains(Integer.valueOf(lno))) continue; if (text == void || text == null || etext == void || etext == null) { continue; }; text = (text.indexOf(etext) != -1? StringUtils.substringBefore(text, etext) + String.format(" \u001b[1;31m%d\u001b[0m\u001b[0;31m(\u001b[0m%s\u001b[0;31m)\u001b[0m", lno, String.valueOf(etext).replaceAll("(.)", String.format("%c$1", 0x0d))) + StringUtils.substringAfter(text, String.valueOf(etext)): text);  ltext = text; letext = etext; used.add(Integer.valueOf(lno));  }; return Quad.of(Pair.of(linenoAttr, conv), ast, stmap, text.replaceAll(String.format("%c", 0x0d), "").replace("   ", "  "));  }

