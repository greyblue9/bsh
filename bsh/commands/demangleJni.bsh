


public static Quad demangleJni(String name) { String className = null, methodName = null; Map gm = Collections.emptyMap(); List types = null; ArrayDeque q = null; Object ret = null; jadx.core.dex.nodes.parser.SignatureParser gsp = null;  String[] parts = StringUtils.substringAfter(name, "Java_").split("__"); String className_methodName_enc = parts[0]; String argsPartEnc = parts.length > 1? parts[1]: ""; String dec = StringEscapeUtils.unescapeJava(className_methodName_enc.replace("_3", "[").replace("_2", ";").replace("_1", "_").replaceAll("_0([0-9A-Fa-f]{4})", "\\\\u$1")); Matcher mchr = Pattern.compile("^((?:[^_]|_[^_])*)_([^_]+)$").matcher(dec); if (mchr.find()) { className = mchr.group(1).replace('_', '.'); methodName = mchr.group(2).replace('_', '.'); }; Arrays.asList(className, methodName); String args = StringEscapeUtils.unescapeJava(argsPartEnc.replace("_3", "[").replace("_2", ";").replace("_1", "_").replaceAll("_0([0-9A-Fa-f]{4})", "\\\\u$1")).replace('_', '/'), sig = args; if (sig.length() > 0) { types = new ArrayList(); gsp = new jadx.core.dex.nodes.parser.SignatureParser(sig); if (sig.charAt(0) == '<') gm = gsp.consumeGenericMap(); if (gsp.tryConsume('(')) { while (!gsp.tryConsume(')')) types.add(gsp.consumeType()); gsp.tryConsume(')'); ret = gsp.consumeType(); } else { q = new ArrayDeque(); do { try { q.offerLast(gsp.consumeType()); } catch (Throwable e) { ret = q.pollLast(); types = Arrays.asList(q.toArray()); break; }; } while (true); }; } else { types = Collections.emptyList(); ret = null; }; String str = String.format("%s %s.%s(%s);", ret, className, methodName, StringUtils.join(types, ", ")); return Quad.of(Pair.of(className, methodName), types, ret, gm); };



