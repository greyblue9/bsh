public static void dump2(java.lang.Object o) {
  print(dumpStr(o, o.getClass(), 5));
}

public static java.lang.String dumpStr(java.lang.Object o) {
  return dumpStr(o, o.getClass(), 1);
}

public static java.lang.String dumpStr(java.lang.Object o, java.lang.Class cls) {
  return dumpStr(o, o.getClass(), 1);
}

public static java.lang.String dumpStr(java.lang.Object o, java.lang.Class cls, int depthRem) {
  if (depthRem == 0) {
    return "...";
  }
  
  if (o == null) return "null";
  if (cls == null) return "null";
  
  java.lang.String lf 
    = new java.lang.Character((char)0x0a).toString();
  
  java.lang.reflect.Field[] fields 
    = cls.getDeclaredFields();
  java.lang.reflect.Field field;
  
  java.lang.StringBuilder sb = new java.lang.StringBuilder(75);
  sb.append("=== As "+cls.getName()+" ==="+lf);
  
  for (int n=0; n<fields.length; n++) {
    field = fields[n];
    java.lang.String name = field.getName();
    
    java.lang.String sig = field.getType().getSimpleName();
    
    java.lang.String str;
    if (o != null) {
      
      ((java.lang.reflect.AccessibleObject) field) 
        .setAccessible(true);
      java.lang.Object val = field.get(o);
      
      boolean isArray 
        = (val != null && new java.lang.Character(val.getClass().getName().charAt(0)).equals('['));
      
      java.lang.String valStr = (val != null? val.toString(): "null");
      
      if (depthRem > 0 && valStr.indexOf('@') != -1) {
        if (isArray) {
          
          valStr += " [" + lf + "  ";
          int vLen = java.lang.reflect.Array.getLength(val);
          for (int i=0; i < vLen; i++) {
            if (i > 0) {
              sb.append(java.lang.String.format(",%c  ", 0x0a));
            }
            java.lang.Object boxedEntry 
              = java.lang.reflect.Array.get(val, i);
            
            valStr += (boxedEntry == null)? 
                "null"
              : dumpStr(
                  boxedEntry, 
                  boxedEntry.getClass(), 
                  depthRem - 1
                ).replaceAll(lf, lf + "  ");
           
          }
          valStr += "]";
        } else if (depthRem > 0) {
          valStr += (val == null)? 
                ""
              : dumpStr(
                  val, 
                  val.getClass(), 
                  depthRem - 1
                ).replaceAll(lf, lf + "  ");
          
        }
      }
      
      sb.append(java.lang.String.format(
        "%33s = %s%c",
        "("+sig+") " + name, 
        valStr,
        0x0A
      ));
      
    } else {
      
      sb.append(java.lang.String.format(
        "%33s%c",
        "("+sig+") " + name, 0x0A
      ));
      
    }
  }
  
  java.lang.Class superCls = cls.getSuperclass();
  if (superCls != null && superCls != java.lang.Object.class) {
    sb.append(lf);
    sb.append(
      dumpStr(o, superCls, depthRem-1).replaceAll(lf, lf+"  ")
    );
  }
  //sb.append(lf);
  return sb.toString();
}

