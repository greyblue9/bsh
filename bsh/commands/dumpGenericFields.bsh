dumpGenericFields(cp) { try { if (cp instanceof Class && cp.isInterface()) return; import dumpMembers; import org.d6r.*; source("/data/media/0/bsh/commands/getListClass.bsh"); gcsa = java.lang.reflect.AccessibleObject.class.getDeclaredMethod("getClassSignatureAnnotation", Class.class); gcsa.setAccessible(true); cls = (cp instanceof java.lang.Class)? cp: (cp instanceof bsh.ClassIdentifier? cp.getTargetClass(): cp.getClass());  print("=======>  As "+dumpMembers.colorize(cls.getName()+java.util.Arrays.toString(cls.getTypeParameters()).replace("[","<").replace("]",">"),"1;37m")+"  <========"); List mbs = new ArrayList(); Collections.addAll(mbs, cls.getDeclaredFields()); for (ic : cls.getDeclaredClasses()) { dumpGenericFields(ic);  }   for (f: mbs) { print(f.getGenericType()); if (java.util.Collection.class.isAssignableFrom(f.getType()) && f.get(cp) != null) {  print(dumpMembers.colorize(f.getGenericType() + "<" + getListClass(f.get(cp)) + "> { "+ReflectionUtil.getClassName(f.getType().getGenericSuperclass())+"}" ,"1;32")); } print("  "+dumpMembers.colorize(java.util.Arrays.toString(gcsa.invoke(null, f.getType())).replace(":","=").replaceAll("([^A-Za-z0-9,<>/= ]+|,L)", "").replace(" L","").replace('/','.').replaceAll(", ([^A-Za-z])"," $1")+ " "+f.getName(),"1;33") + "\n"); }  scls = cls.getSuperclass(); if (scls != null){ dumpGenericFields(scls); } } catch (e) { return; } }

