public static Class findInnerClass(String clzname) { ClassLoader ldr = Thread.currentThread().getContextClassLoader(); Class cls = null; List parts = new java.util.ArrayList(); int idx; while (true) { idx = clzname.indexOf('.'); if (idx == -1) break;  String part = clzname.substring(0, idx); clzname = clzname.substring(idx + 1); parts.add(part); if (this.interpreter.DEBUG) print(String.format("[%s] [%s] (%d) : %s", clzname, part, clzname.indexOf(-1), java.util.Arrays.toString(parts.toArray()))); } parts.add(clzname); if (this.interpreter.DEBUG) print(java.util.Arrays.toString(parts.toArray())); Object[] _parts = parts.toArray(); String chars; int max = (int) Math.pow(2,_parts.length); String fmt="%"+_parts.length+"s"; for (int i=0; i<max; i++) { chars = String.format(fmt, Integer.toBinaryString(i).replace(' ','.').replace('0','.').replace('1','$')); chars = chars.replace(' ','.'); StringBuilder _clzname = new StringBuilder(clzname.length()); for (int j=0; j<_parts.length; j++) { _clzname.append(_parts[j]); if (j!=_parts.length-1) _clzname.append(chars.charAt(j)); } try { cls = ldr.loadClass(_clzname.toString()); return cls; } catch (Throwable e) {} } return null; }
