public static Map fixZip_outputZipFragments(String listFile) { Map zipToOutDirMap = new TreeMap(); for (String s: FileUtils.readLines(new File(listFile), java.nio.charset.StandardCharsets.UTF_8)) { File file = new File(s); System.err.printf("===> %s\n", file.getPath()); byte[] zipBytes = FileUtils.readFileToByteArray(file); byte[] bseq = new byte[]{ 0x50, 0x4b, 0x03, 0x04 }; File tempDir = new File(System.getProperty("outdir", "/tm/tmp/archive_fragments_" + StringUtils.substringBeforeLast(file.getName(), "."))); if (tempDir.mkdirs()) { ad = new ArrayDeque(); int fragIndex = -1, last = -1, nextLast = -1, pos = -1; while ((pos = ByteUtil.indexOf(zipBytes, bseq, ++last)) != -1) { ad.offer(pos); System.err.printf("Found zip signature at offset %d\n", pos); nextLast = last; last = pos; }; pairs = new ArrayList(); while (ad.size() > 1) { int start = ad.poll().intValue(); int end = ad.peek().intValue(); pairs.add(pair = Pair.of(start, end)); System.err.println(pair); };  for (Pair pair: pairs) { byte[] data = Arrays.copyOfRange(zipBytes, pair.getKey().intValue(), pair.getValue().intValue()); File outFile = new File(tempDir, String.format("fragment_%04d_%08d.zip", ++fragIndex, pos)); FileUtils.writeByteArrayToFile(outFile, data); System.out.println(outFile + ": " + outFile.length()); }; System.out.println(tempDir.getPath()); zipToOutDirMap.put(s, tempDir.getPath());  }; }; return zipToOutDirMap; }; 

