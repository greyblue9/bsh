public static String formatJava2(String src) { Path tmp = Files.createTempFile(".tmpsrc.", ".java"); Files.write(tmp, src.getBytes("UTF-8")); src2 = PosixFileInputStream.pexecSync("fmtjava_extra", tmp.getPathForExceptionMessage()); int pkgidx = src2.indexOf("package "); if (src2.charAt(pkgidx - 1) == '\n') src2 = src2.substring(pkgidx); unset("mchr"); Matcher mchr = Pattern.compile("(/\\*\\*?)(((?!\\*/).)*)</? ?[a-z]+[0-9]*[^>]*>", Pattern.DOTALL | Pattern.MULTILINE | Pattern.UNIX_LINES).matcher(""); mchr.reset(src2); int hc = src2.hashCode(); int prev = 0; while (prev != hc) { prev = hc; mchr.reset(src2); if (!mchr.find()) break; src2 = mchr.replaceAll("$1$2"); hc = src2.hashCode(); };  return src2; }

public static String formatJava2(String src) { return Pattern.compile("(^|\n)((?:[\t ]{2})*) ?(\\*/)", Pattern.DOTALL | Pattern.UNIX_LINES).matcher(Pattern.compile("(^|\n)((?:[\t ]{2})*) ?(?:\\* )", Pattern.DOTALL | Pattern.UNIX_LINES).matcher(TextUtil.colorrm(parseJava(src).getRight().getValue().toString())).replaceAll("$1  ")).replaceAll("$1  $3"); }

