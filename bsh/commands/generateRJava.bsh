import java.util.Map.Entry;



public static String generateRJava(Object apk) { Map rm = getApkRes(apk); Map allmap = (rm.containsKey("allmap"))? rm["allmap"]: rm; kinds = allmap["kinds"]; Map am = RealArrayMap.toMap(sets = kinds.select(FunctionUtil.bind("""return m -> { Pair.of(String.format("R$%s", m), allmap.get(m).entrySet()); }"""))); List clsStrs = new ArrayList(); for (Entry e: am.entrySet()) { List lines = new ArrayList(); lines.add(String.format("public static class %s {", e.getKey().replaceAll("^.*\\$([^$]+)$", "$1"))); for (Entry ent: e.getValue()) { lines.add(String.format("  public static final int %s = 0x%s;", ent.getValue(), ent.getKey())); }; lines.add("}"); String clsStr = "  " + StringUtils.join(lines.subList(0, lines.size() -1), "\n    ") + "\n  " + lines.get(lines.size()-1); clsStrs.add(clsStr); }; String src = String.format("public class R {\n\n%s\n\n}\n", StringUtils.join(clsStrs, "\n\n")); return src; }



public static String generateRJava(String apkPath) { Pair dcp = getResDecoderWithData(ZipUtil.toByteArray(apkPath, "resources.arsc"));  conf = dcp.getValue().getOnePackage().getConfig(new zhao.arsceditor.ResDecoder.data.ResConfigFlags((short) 0, (short) 0, new char[]{'\u0000', '\u0000'}, new char[]{'\u0000', '\u0000'}, (byte) 0, (byte) 0, (int) 0, (byte) 0, (byte) 0, (byte) 0, (short) 0, (short) 0, (short) 0, (byte) 0, (byte) 0, (short) 0, (short) 0, (short) 0, (char[]) null, (char[]) null, (byte) 0, (boolean) false, (int) 48));       rm = new TreeMap(new ToStringComparator()); for (rs: conf.listResSpecs()) { type = String.format("R$%s", rs.getType().getName()); id = rs.getId().id; name = rs.getName(); if (!rm.containsKey(type)) rm.put(type, (rl = new ArrayList()));  else rl = rm.get(type); rl.add(Pair.of(String.format("%X", id), name));  };  Map am = rm; List<StringBuilder> sbs = new ArrayList();  for (Entry ent: am.entrySet()) { String type = StringUtils.substringAfter(ent.getKey(),"R$");  Collection specs = ent.getValue(); if (specs.isEmpty()) continue;  StringBuilder sb = new StringBuilder(String.format("  public static final class %s {\n    ", type)).append(StringUtils.join(specs.select(FunctionUtil.bind("""return m -> { String.format("public static final int %2$s = 0x%1$s;", m.getKey(), m.getValue()); }""")), "\n    ")).append("\n  }\n"); sbs.add(sb);  }; String src = String.format("package %s;\n\n\npublic final class R {\n  \n  %s\n  \n}\n\n", dcp.getValue().getOnePackage().getName(), StringUtils.join(sbs, "\n"));      FileUtils.writeStringToFile(new File("R.java"), src);  return src; };