public static List<Object> getAllThreadState(Class cls) { List<Object> outLocals = new ArrayList<Object>();  for (Thread t: Thread.getAllStackTraces().keySet()) { Object[] localValues = Reflect.getfldval(t, "localValues", false); if (localValues == null) continue; Object[] localRefs = Reflect.getfldval(localValues, "table", false); if (localRefs == null) continue; for (Object localRef: localRefs) { Object local = (localRef instanceof java.lang.ref.Reference)? Reflect.getfldval(localRef, "referent"): localRef; if (local == null) continue; if (local instanceof ThreadLocal) local = ((ThreadLocal) local).get(); if (local == null) continue; if (cls == null || cls.isAssignableFrom(local.getClass())) outLocals.add(local); }; }; try { return outLocals; } finally { outLocals = null; } };
public static List<Object> getAllThreadState() { List<Object> outLocals = new ArrayList<Object>();  for (Thread t: Thread.getAllStackTraces().keySet()) { Object[] localValues = Reflect.getfldval(t, "localValues", false); if (localValues == null) continue; Object[] localRefs = Reflect.getfldval(localValues, "table", false); if (localRefs == null) continue; for (Object localRef: localRefs) { Object local = (localRef instanceof java.lang.ref.Reference)? Reflect.getfldval(localRef, "referent"): localRef; if (local == null) continue; if (local instanceof char[]) local = new StringBuilder(0).append((char[]) local); if (local instanceof ThreadLocal) local = ((ThreadLocal) local).get(); outLocals.add(local); }; }; try { return outLocals; } finally { outLocals = null; } };