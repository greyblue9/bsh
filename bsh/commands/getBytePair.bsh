public static Pair getBytePair() { SortedSet s = CollectionFactory.newSet(getClip().matchAll("([0-9A-Fa-f]{2}(?: *(?:[0-9a-fA-F]{2})+ *)*)").select(FunctionUtil.bind("return m -> { Pair.of(Integer.MAX_VALUE - m.replaceAll(\"[^0-9A-Fa-f]+\", \"\").length(), m.trim()); }")));  if (s.isEmpty()) return null;  String hex = s.iterator().next().getValue();  byte[] _bs = null, bs = null, _bsr = null, bsr = null; _bs = new java.math.BigInteger(Long.toString(Long.reverseBytes(Long.parseLong(hex,16)),16),16).toByteArray(); int offs = 0; _bsr = new java.math.BigInteger(Long.toString((Long.parseLong(hex,16)),16),16).toByteArray(); do { bsr = Arrays.copyOfRange(_bsr,offs,offs+4); } while (!(_bs[0]==bsr[3]&&_bs[1]==bsr[2]&&_bs[2]==bsr[1]&&_bs[3]==bsr[0]) && ((++offs) <= _bsr.length-4)); bs = Arrays.copyOfRange(_bs,0,bsr.length); System.err.printf("Left: %33s | Right: %33s\n", StringUtils.substringBefore(HexDump.dump(bs).delete(0,10).toString(),"\n"), StringUtils.substringBefore(HexDump.dump(bsr).delete(0,10).toString(),"\n")); return Pair.of(bs, bsr); };