
public static org.benf.cfr.reader.entities.ClassFile getClassFile(String className) { org.benf.cfr.reader.bytecode.analysis.types.JavaTypeInstance typeId = org.benf.cfr.reader.bytecode.analysis.types.JavaRefTypeInstance.create(className, CFRDecompiler.getDCCS()); try { org.benf.cfr.reader.entities.ClassFile classFile = CFRDecompiler.getDCCS().getClassFile(typeId); return classFile; } catch (org.benf.cfr.reader.util.CannotLoadClassException ex) { String msg = String.format("%s for type: [%s]\n", ex.getClass().getSimpleName(), typeId); InputStream is = org.cojen.classfile.TypeLoaderClassFileDataLoader.getDefault().getClassData(className); if (is != null) { org.benf.cfr.reader.util.bytestream.OffsettingBackedByteData data = new org.benf.cfr.reader.util.bytestream.OffsettingBackedByteData(IOUtils.toByteArray(is), 0); String iClsName; classFile = new org.benf.cfr.reader.entities.ClassFile(data, iClsName = ClassInfo.typeToName(className).replace('.', '/'), CFRDecompiler.getDCCS()); CFRDecompiler.getDCCS().classFileCache.exceptionMap.clear(); CFRDecompiler.getDCCS().classFileCache.inner.put(iClsName.concat(".class"), classFile); CFRDecompiler.getDCCS().classCache.add(classFile.getRefClasstype().getRawName(), classFile.getRefClasstype()); CFRDecompiler.getDCCS().couldNotLoadClasses.clear(); return classFile; }; System.err.printf("[ERROR] %s:\n  - %s\n", msg, ex); }; };

