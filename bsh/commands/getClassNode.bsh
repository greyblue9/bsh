import jadx.api.JadxDecompiler;
import jadx.core.dex.instructions.args.ArgType;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.DexNode;
import jadx.core.dex.nodes.ProcessState;


public static ClassNode getClassNode(Object clazzObj, File dexOrZipFile) {
  Class clazz = (clazzObj instanceof Class)
    ? (Class) clazzObj
    : dumpMembers2.getClass(clazzObj);
  Map globals = RealArrayMap.toMap(
    CollectionUtil.getInterpreter().getNameSpace().getVariables().values());
  Map jx = globals.containsKey("jx")
    ? globals.get("jx")
    : getJadxNoAddResClasses(
        (
          (dexOrZipFile != null)
            ? dexOrZipFile
            : findClassSource(clazz).file
        ).getPath() 
      );
  Map jadxVars = RealArrayMap.toMap(jx.values());
  JadxDecompiler dc = jadxVars.get("dc");
  List<DexNode> dexNodes = dc.root.dexNodes;
  DexNode dexNode = dexNodes.firstOrDefault();
  ArgType argType = ArgType.parse(String.format(
    "L%s;", ClassInfo.classNameToPath(clazz.getName(), null)
  ));
  ClassNode classNode = dexNode.resolveClass(argType);
  if (classNode.state == ProcessState.NOT_LOADED) {
    classNode.load();
    dc.processClass(classNode);
  };
  return classNode;
};


public static ClassNode getClassNode(Object clazzObj) {
  return getClassNode(clazzObj, (File) null);
};



