


public static String[] getClinitClassNames2(File loadedDexFilePath) { String[] strs = null; Object dexElement = ClassPathUtil2.findDexElement(Thread.currentThread().getContextClassLoader(), loadedDexFilePath); if (dexElement == null)  throw new IllegalArgumentException(String.format("Cannot find a loaded DexElement with a path matching the File \"%s\"", loadedDexFilePath)); Integer mCookie = dexElement.dexFile.mCookie; Dex dex = null; int index = 0;  String[] classNames = DexFile.getClassNameList(mCookie); boolean found = false; for (int i=0,len=classNames.length; i<len; ++i) { try {Class cls = Class.classForName(classNames[i], false, Thread.currentThread().getContextClassLoader()); if (cls != null) { dex = org.d6r.ClassInfo.getDex(cls); if (dex == null) { System.err.printf("classForName(%s).getDex() returned null\n", classNames[i]); continue; }; } else { System.err.printf("classForName(%s) returned null\n", classNames[i]); continue;  }; } catch (Throwable e) { continue; };  if (ClassInfo.typeToName(dex.strings()[dex.typeIds()[dex.open(dex.getTableOfContents().classDefs.off).readClassDef().getTypeIndex()]]).equals(classNames[0])) { found = true; break; } }; if (found) System.err.printf("** Found matching Dex for DexElement: [%s] **\n", dexElement); else throw new RuntimeException(String.format("Matching dex not found for DexElement: [%s]; mCookie = %d", dexElement, mCookie)); strs = CollectionUtil.toArray(dex.strings()); int methodName_sidx = Arrays.binarySearch(strs, "<clinit>");  Integer[] typeIds = ArrayUtils.nullToEmpty(new HashSet(dex.methodIds().select(String.format("m => return (java.lang.Integer) ((m.getNameIndex() == %d)? java.lang.Integer#valueOf(m.getDeclaringClassIndex()): null); }", methodName_sidx))).toArray(new Integer[0]));  String[] typeNames = ClassInfo.typeToName(typeIds.select(FunctionUtil.bind("return m -> { m != null? strs[dex.typeIds().get(m.intValue())]: null; }", "strs", strs,"dex",dex))); }



