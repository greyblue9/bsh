import bsh.classpath.BshClassPath;
import bsh.ClassIdentifier;
import libcore.reflect.ParameterizedTypeImpl;
import java.util.jar.JarFile;
import java.util.jar.JarEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import jadx.api.JavaClass;
import jadx.api.JadxDecompiler;
import java.util.regex.*;
import jadx.core.dex.nodes.ClassNode;

import com.android.dex.ClassData;
import com.android.dex.ClassData.Field;
import com.android.dex.ClassData.Method;
import com.android.dex.Code;
import com.android.dex.Code.CatchHandler;
import com.android.dex.Code.Try;
import com.android.dex.DexException;
import com.android.dex.DexFormat;
import com.android.dex.EncodedValue;
import com.android.dex.EncodedValueCodec;
import com.android.dex.FieldId;
import com.android.dex.MethodId;
import com.android.dex.ProtoId;
import com.android.dex.TableOfContents;
import com.android.dex.TypeList;
import com.android.dex.util.ByteArrayByteInput;
import com.android.dex.util.ByteInput;
import com.android.dex.util.ByteOutput;
import com.android.dex.util.ExceptionWithContext;
import com.android.dex.util.Unsigned;

import jadx.api.JadxDecompiler;
import jadx.api.JavaClass;
import jadx.api.JavaMethod;
import jadx.core.dex.info.MethodInfo;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.DexNode;
import jadx.core.dex.nodes.RootNode;
import jadx.core.utils.files.InputFile;


public static String getCode2(Object nonClass) {
  bsh.Interpreter _in 
    = org.d6r.CollectionUtil.getInterpreter();
  java.io.PrintStream _err = _in.getErr();  
  
  
  
  Class cls = dumpMembers.getClass(nonClass);
  if (cls == null) {
    _err.println("Warning: getCode: returning <null> in response to a call to getCode2(someObj) with (someObj == null)");
    return null;
  }
  
  return getCode2((Class) cls);
}


public Map getLoadedDexMap() {
  Map map = CollectionUtil.dbg.get("_loadedDexMap");
  if (map == null) {
    map = new IdentityHashMap();
    CollectionUtil.dbg.put("_loadedDexMap", map);
  }
  return map;
}


public static File getCodeSource(Class cls) {
  Dex dex = org.d6r.ClassInfo.getDex(cls);
  Map map = getLoadedDexMap();
  File clsFile = map.get(dex);
  if (clsFile == null) {
    Object clsSource = findClassSource(cls);
    File clsFile = clsSource != null? clsSource.file: null;
    if (clsFile == null) {
      Collection<String> sources
        = ClassPathUtil.findClassSource(cls.getName());
      if (!sources.isEmpty()) {
        clsFile = new File(sources.iterator().next());
        String ext = StringUtils.substringAfterLast(clsFile.getName());
        if ("apk".equals(ext) || "jar".equals(ext)) {
          Map map = getJadxWithResClasses(clsFile.getPath());
          Map vars = RealArrayMap.toMap(map.values());
          DexNode dexNode = vars.get("dexNode");
          jadx.core.utils.files.DexFile dexFile = dexNode.getDexFile();
          InputFile inputFile = dexFile.getInputFile();
          File cpFile = inputFile.getFile();
          return cpFile;
        }
        return clsFile;
      }
    }
    if (clsFile != null) map.put(dex, clsFile);
    else {
      Log.w("getCodeSource", "Cannot find code source for %s", cls);
    }
  }
  return clsFile;
}

public static DexNode findDexNode(JadxDecompiler dc, File file) {
  for (DexNode dexNode: dc.getRoot().dexNodes) {
    File dexNodeFile = dexNode.file.getInputFile().getFile();
    
    if (file.equals(dexNodeFile) ||
        file.getCanonicalPath().equals(dexNodeFile.getCanonicalPath())) {
      return dexNode;
    }
  }
  throw new RuntimeException(String.format(
    "Cannot find DexNode for file: %s; dexNodes: %s",
    file, dc.getRoot().dexNodes
  ));
}
  

public static Object getCode2(Class _cls) {
  bsh.Interpreter _in = org.d6r.CollectionUtil.getInterpreter();
  java.io.PrintStream _out = _in.getOut();  
  java.io.PrintStream _err = _in.getErr();  
  String _clsname = _cls.getName();
  
  JadxDecompiler jadx_dc = _in.getu("jadx$dc");
  if (jadx_dc == null) {
    jadx_dc = new JadxDecompiler(); 
    _in.setu("jadx$dc", jadx_dc);
  }
  
  
  File cpFile = getCodeSource(_cls);
  if (cpFile == null) return null;
  if (cpFile.exists()) {
    _err.printf("[%s]: File OK (exists)\n", cpFile);
  } else {
    _err.println("File does not exist");
    return null;
  }
  
  List<InputFile> ifiles = jadx_dc.inputFiles;
  InputFile inFile = null;
  for (InputFile ifile: ifiles) {
    if (cpFile.equals(ifile.getFile())) {
      inFile = ifile;
      System.err.printf("[INFO] File already loaded: [%s]\n", ifile);
      break;
    }
  }
  if (inFile == null) {
    System.err.printf("[INFO] Loading new file: [%s]\n", cpFile);
    jadx_dc.loadFile(cpFile);
  }
  /*
  DexNode dexNode = findDexNode(jadx_dc, cpFile);  
  jadx.core.dex.info.ClassInfo clsInfo
    = jadx.core.dex.info.ClassInfo.fromName(dexNode, _cls.getName());
  ClassNode classNode = dexNode.resolveClass(clsinfo);
  */
  LazyMember
    jc_classNode = LazyMember.of("cls", JavaClass.class),
    classNode_info = LazyMember.of("clsInfo", ClassNode.class), 
    info_clsName = LazyMember.of(
      "jadx.core.dex.info.ClassInfo", "fullName");
  
  Map jcsByName = RealArrayMap.toMap(
    jadx_dc.getClasses().select(FunctionUtil.bind(StringUtils.join(Arrays.asList(
      "return m -> { ",
      "  Pair.of(info_clsName.getValue(",
      "    classNode_info.getValue(jc_classNode.getValue(m))",
      "  ), m);",
      " }"), "\n"),
      "jc_classNode", jc_classNode,
      "classNode_info", classNode_info,
      "info_clsName", info_clsName
    ))
  );
  JavaClass jclazz = jcsByName.get(_clsname);
  
  /*
  JavaClass topClass = jclazz;
  _err.printf("topClass = %s\n", topClass);
  ClassNode topNode = classNode;
  if (topNode.getRawName().equals(_cls.getName())) {
    theClass = topClass;
  } else {
    _err.printf(
      "Name mismatch -- checking inner classes ...\n"
    );
    Collection<JavaClass> nestedClasses 
      = topClass.getInnerClasses();
    _err.printf(
      "%d inner classes: %s\n", 
      nestedClasses.size(), nestedClasses.toString()
    );
    for (JavaClass nClass: nestedClasses) {
      String rawName = nClass.getClassNode().getRawName();
      _err.printf("- Checking: %s\n", rawName);
      if (! rawName.equals(_cls.getName())) continue; 
      theClass = topClass;
      break;
    }
  }
  */
  if (jclazz == null) {
    _err.printf(
      "Sorry, I couldn't find a match for '%s'\n."
      + "  - namespace saved to `jns` variable\n\n",
      _cls.getName()
    );
    CollectionUtil.getInterpreter().setu("jns", this.namespace);
    return null;
  }
  
  jclazz.decompile();  
  return jclazz.getCode();
}



public static com.android.dex.Code getCode2(Method mtd) { com.android.dex.Dex dex = mtd.getDeclaringClass().getDex(); com.android.dex.ClassData.Method[] allMethods = dex.open(dex.classDefs()[mtd.getDeclaringClass().getDexClassDefIndex()].getClassDataOffset()).readClassData().allMethods(); int start = allMethods[0].getMethodIndex(); com.android.dex.Code code = dex.open(allMethods[mtd.getDexMethodIndex() - start + 1].getCodeOffset()).readCode(); return code; }





public static Object getCode2(JadxDecompiler jadx_dc, Object regex) {
  bsh.Interpreter _in = org.d6r.CollectionUtil.getInterpreter();
  java.io.PrintStream _out = _in.getOut();  
  java.io.PrintStream _err = _in.getErr();  
  /*
  DexNode dexNode = findDexNode(jadx_dc, cpFile);  
  jadx.core.dex.info.ClassInfo clsInfo
    = jadx.core.dex.info.ClassInfo.fromName(dexNode, _cls.getName());
  ClassNode classNode = dexNode.resolveClass(clsinfo);
  */
  LazyMember
    jc_classNode = LazyMember.of("cls", JavaClass.class),
    classNode_info = LazyMember.of("clsInfo", ClassNode.class), 
    info_clsName = LazyMember.of(
      "jadx.core.dex.info.ClassInfo", "fullName");
  
  Map jcsByName = RealArrayMap.toMap(
    jadx_dc.getClasses().select(FunctionUtil.bind(StringUtils.join(Arrays.asList(
      "return m -> { ",
      "  Pair.of(info_clsName.getValue(",
      "    classNode_info.getValue(jc_classNode.getValue(m))",
      "  ), m);",
      " }"), "\n"),
      "jc_classNode", jc_classNode,
      "classNode_info", classNode_info,
      "info_clsName", info_clsName
    ))
  );
  Map dcrs = new bsh.NameSpace.BindingMap();
  int i = -1;
  jadx_dc.root.initInnerClasses();
  for (DexNode dn: jadx_dc.root.dexNodes[0].getClasses().filter(regex)) {
    System.err.printf("init: %s\n", dn);
    dn.load();
  }
  
  for (String className: jcsByName.keySet().filter(regex)) {    
    JavaClass jclazz = jcsByName.get(className);
    ++i;
    if (i == 10 || i % 50 == 9) {
      CollectionUtil.getInterpreter().setu("_dcrs", dcrs);
      writeVars(Arrays.asList("_dcrs"));
    }
    System.err.printf("Decompiling %s ...\n", className);
    jclazz.decompile();  
    Object code = jclazz.getCode();
    System.err.printf("  -> code length: %d chars\n", code.length());
    if (className.indexOf('$') != -1) {
      String part1 = StringUtils.substringBefore(className, "$");
      if (jcsByName.containsKey(part1)) continue;
    }
    dcrs.put(ClassInfo.classNameToPath(className, "java"), code);
  }
  return dcrs;
}




