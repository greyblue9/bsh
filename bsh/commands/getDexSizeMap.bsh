public static Map getDexSizeMap() { Map m = getMemoryMap(); Set entries = m.entrySet().filter("classes.dex"); Map sums = new HashMap(), marks = new HashMap(); entries.select(FunctionUtil.bind("""return e -> { var filename = e.getValue().get(5); var offset = e.getValue().get(1).longValue(); if (!marks.containsKey(filename)) marks.put(filename, Reflect.newInstance(Class.forName("libcore.util.MutableLong"), Long.valueOf(0))); var fmark = marks.get(filename); var prevmark = fmark.value; var length = e.getKey().upperEndpoint().longValue() - e.getKey().lowerEndpoint().longValue() + 1; if (!sums.containsKey(filename)) sums.put(filename, Reflect.newInstance(Class.forName("libcore.util.MutableLong"), Long.valueOf(0))); var sum = sums.get(filename); if (prevmark == offset) { sum.value += length; fmark.value = e.getValue().get(1) + length; }; return Pair.of(filename, sum.value); }""", "sums", sums, "marks", marks, "MutableLong", libcore.util.MutableLong.class, "zerol", 0L)); Map dexSizes = RealArrayMap.toMap(sums.entrySet().select(FunctionUtil.bind("""return m -> { Pair.of(StringUtils.substringBeforeLast(StringUtils.substringAfter(String.valueOf(m.getKey()).trim(), "/data/dalvik-cache"), "@classes.dex").replace("@", "/"), m.getValue().value); }"""))); return dexSizes; };