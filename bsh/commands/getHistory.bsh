public static String[] getHistory(int min, maxLen) { String[] _lines = null; int i=1; libcore.io.StructStat stat = PosixUtil.stat(path="/data/media/0/bsh_log.txt"); long sz = stat.st_size; long amtmax = 1024*1024; do { do { long amt = Math.min(sz, amtmax * i); byte[] selb = new byte[(int) amt]; PosixUtil.pread(fd = PosixUtil.open(path, PosixUtil.O_RDONLY, 0), selb, 0, selb.length, sz - amt); PosixUtil.close(fd); String[] lines = TextUtil.toString(selb).matchAll("(?:^|\n)(?:bsh % (?:\\^M|\\u001d))*((?:[^\n^\\u000d\\u001b]|\\^[^M\n]+)+)(?=$|\n|\\^M)").toArray(new String[0]).uniq(); _lines = lines; i++; } while (_lines.length == 0 && (1024*1024)*i < sz); _lines = _lines.filter("^((?!\\^\\[\\[[0-9;]+m).){1,3000}$"); } while (_lines.length < min || min == -1); if (maxLen != -1) { if (_lines.length <= maxLen) return _lines; ArrayUtils.reverse(_lines); _lines = Arrays.copyOfRange(_lines, 0, maxLen); ArrayUtils.reverse(_lines); return _lines; }; return _lines; }

public static String[] getHistory(int maxLen) { String[] _lines = null; int i=1; libcore.io.StructStat stat = PosixUtil.stat(path="/data/media/0/bsh_log.txt"); long sz = stat.st_size; long amtmax = 1024*1024; do { long amt = Math.min(sz, amtmax * i); byte[] selb = new byte[(int) amt]; PosixUtil.pread(fd = PosixUtil.open(path, PosixUtil.O_RDONLY, 0), selb, 0, selb.length, sz - amt); PosixUtil.close(fd); String[] lines = TextUtil.toString(selb).matchAll("(?:^|\n)(?:bsh % (?:\\^M|\\u001d))*((?:[^\n^\\u000d\\u001b]|\\^[^M\n]+)+)(?=$|\n|\\^M)").toArray(new String[0]).uniq(); _lines = lines; i++; } while (_lines.length == 0 && (1024*1024)*i < sz); _lines = _lines.filter("^((?!\\^\\[\\[[0-9;]+m).){1,3000}$"); if (maxLen != -1) { if (_lines.length <= maxLen) return _lines; ArrayUtils.reverse(_lines); _lines = Arrays.copyOfRange(_lines, 0, maxLen); ArrayUtils.reverse(_lines); return _lines; }; return _lines; }

public static String[] getHistory() { return getHistory(-1); }