

public static Set<Class> getImpls0(Class cls) { List allSubDefs = new ArrayList(); int clsDefIndex = cls.getDexClassDefIndex(); com.android.dex.Dex dex = org.d6r.ClassInfo.getDex(cls); com.android.dex.ClassDef[] defs = CollectionUtil.toArray(dex.classDefs());  com.android.dex.ClassDef clsDef = defs[clsDefIndex]; allSubDefs.add(clsDef);  com.android.dx.util.IntSet cdidxs = new com.android.dx.util.BitIntSet(64); cdidxs.add(clsDefIndex); com.android.dx.util.IntSet typeIdxs = new com.android.dx.util.BitIntSet(64); com.android.dx.util.IntIterator it = cdidxs.iterator(); while (it.hasNext()) { cdidx = it.next(); System.out.printf("classDefIndex: %d\n", cdidx); com.android.dex.ClassDef cd = defs[cdidx]; int typeIdx = cd.getTypeIndex(); System.err.printf("  - typeIndex: %d\n", typeIdx); typeIdxs.add(typeIdx);  }; int iter = 0; CollectionUtil.getInterpreter().setu("typeIdxs", typeIdxs); subDefs = defs.where("m => com.android.dx.util.IntSet typeIdxs = (com.android.dx.util.IntSet) org.d6r.CollectionUtil#getInterpreter().getu(\"typeIdxs\"); if (typeIdxs.has(m.getSupertypeIndex())) return true; short[] ifaces = m.getInterfaces(); for (int s=0, slen=ifaces.length; s<slen; s++) { if (typeIdxs.has((int) ifaces[s])) return true; }; return false;"); java.util.Collections.addAll(allSubDefs, subDefs);  typeIdxs = new com.android.dx.util.BitIntSet(64); for (com.android.dex.ClassDef subDef: subDefs) { typeIdxs.add(subDef.getTypeIndex()); }; System.err.println(allSubDefs); List<Class> clsImpls = allSubDefs.select("""m => org.d6r.Reflector#invokeOrDefault(java.lang.Class#forName("org.d6r.InternalNames"), "getClass", new java.lang.Object[]{ java.lang.Thread#currentThread().getContextClassLoader(), ((com.android.dex.Dex) org.d6r.Reflect#getfldval(m, "buffer")).typeNames().get((int) m.getTypeIndex()) });"""); Set ts = new TreeSet(new ToStringComparator()); ts.addAll(clsImpls); return ts; }

public static Set<Class> getImpls(Class cls, int max) { int iter = 0; Set ims = new HashSet(), newims = new HashSet(Arrays.asList(cls)); ArrayDeque q = new ArrayDeque(); visited = new HashSet(); while (++iter <= max) { q.addAll(newims); q.removeAll(visited); newims.clear(); while (!q.isEmpty()) {  Class cur = q.pollLast(); Set<Class> curIms = getImpls0(cur); visited.add(cur); newims.addAll(curIms); ims.add(cur); ims.addAll(curIms); }; }; return ims; }

public static Set<Class> getImpls(Class cls) { return getImpls0(cls); }

