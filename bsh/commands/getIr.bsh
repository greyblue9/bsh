


public static String getIr(d2jcd9.com.googlecode.d2j.node.DexMethodNode dmn) { d2jcd9.com.googlecode.d2j.node.DexCodeNode code = dmn.codeNode; d2jcd9.com.googlecode.d2j.Method minfo = dmn.method; boolean isStatic = ((dmn.access & Modifier.STATIC) != 0); d2jcd9.com.googlecode.d2j.converter.Dex2IRConverter conv = new d2jcd9.com.googlecode.d2j.converter.Dex2IRConverter(); irm = conv.convert(isStatic, minfo, code); code = (codeNode = dmn.codeNode); firstFrame = conv.initFirstFrame(code, irm); d2jcd9.com.googlecode.d2j.node.analysis.DvmInterpreter interpreter = conv.buildInterpreter(); insnList = code.stmts; exBranch = new BitSet[code.stmts.size()]; handlers = new BitSet(insnList.size()); conv.emitStmts = new ArrayList[insnList.size()]; for (insn: insnList) { labels = ObjectUtil.searchObject(insn, d2jcd9.com.googlecode.d2j.DexLabel.class, false, 0, 12); for (label: labels) { if (! conv.labelMap.containsKey(label)) { conv.labelMap.put(label, insn); } } }; conv.dfs(exBranch, handlers, access = new BitSet(insnList.size()), interpreter); System.err.println("Simplifying...");  emits = CollectionUtil.flatten(new ArrayList(Arrays.asList(conv.emitStmts).typeFilter(Object.class))); rass = conv.preEmit.filter("@param"); rass.addAll(emits.typeFilter(d2jcd9.com.googlecode.dex2jar.ir.stmt.AssignStmt.class).select(FunctionUtil.bind("return m -> { Local.isInstance(m.op2)? m: null; }", d2jcd9.com.googlecode.dex2jar.ir.expr.Local.class))); exprs = invs = ObjectUtil.searchObject(emits,d2jcd9.com.googlecode.dex2jar.ir.expr.InvokeExpr.class,false,0,12); for (ras: rass) { local = ras.op1; target = ras.op2; for (expr: exprs) { for (int i=0; i<expr.ops.length; i++) { if (expr.ops[i] == local) { expr.ops[i] = target; } }; }; for (stmt: emits) { o1=Reflect.getfldval(stmt,"op1"); o2=Reflect.getfldval(stmt,"op2"); if (o1==local) Reflect.setfldval(stmt,"op1",target); if (o2==local) Reflect.setfldval(stmt,"op2",target);   }; };  emits.removeAll(rass); sb = new StringBuilder(); for (stmt: emits) { if (stmt instanceof d2jcd9.com.googlecode.dex2jar.ir.stmt.LabelStmt) { sb.append("  ").append(stmt); } else { sb.append("    ").append(stmt); }; sb.append('\n'); } return sb.toString(); };



