import com.strobel.assembler.metadata.*;
import com.strobel.decompiler.languages.java.ast.MethodDeclaration;
import com.strobel.decompiler.languages.java.ast.*;
import com.strobel.decompiler.languages.java.ast.AstNode;
import com.strobel.assembler.metadata.MemberReference;
import com.strobel.assembler.metadata.MethodReference;

public static com.strobel.assembler.metadata.MethodDefinition getMethodDefinition(com.strobel.decompiler.languages.java.ast.AstNode node) { MethodDeclaration mdef = null; for (com.strobel.decompiler.languages.java.ast.AstNode child: node.getDescendantsAndSelf()) { if (!(child instanceof com.strobel.componentmodel.UserDataStore)) continue;  List data = ProcyonUtil.getDataList(child); for (Object datum: data) { if (datum instanceof com.strobel.assembler.metadata.MethodReference || datum instanceof com.strobel.assembler.metadata.MemberReference) { try { return datum.resolve(); } catch (Throwable e) { new RuntimeException(String.format("Unable to fully resolve %s: %s: %s", datum.getClass().getSimpleName(), datum.getDescription(), e)).printStackTrace();  return datum; }; if (datum instanceof com.strobel.assembler.metadata.MethodDefinition) return datum; } } }; return null; };



public static MethodDefinition getMethodDefinition(StackTraceElement ste) { String className, methodName; int lno; Pair pair; byte[] cb; TypeDefinition td; List mds; Class cls = DexVisitor.classForName(className = ste.getClassName()); methodName = ste.getMethodName(); lno = ste.getLineNumber(); pair = ProcyonUtil.getDexTypeDefinition(org.d6r.ClassInfo.getDex(cls).getBytes(), className, ProcyonUtil.getMetadataResolver()); com.strobel.assembler.metadata.TypeDefinition td = pair.getKey(); byte[] cb = pair.getValue(); List mds = new ArrayList(); for (MethodDefinition md: td.getDeclaredMethods()) { if (! md.getName().equals(methodName)) continue; mds.add(md); com.google.common.collect.Range lineNoRange = ProcyonUtil.getLineNumberRange(md); System.err.printf("TypeDefinition:   %s\n                  %s\nMethodDefinition: %s\n    - ste.getFileName(): %s\n    - ste.getLineNumber(): %d\n    - md.getSourceAttributes(): %s\n    - lineNumberRange(md): %s", md.getDeclaringType().getErasedSignature(), md.getDeclaringType(), md, ste.getFileName(), ste.getLineNumber(), StringUtils.join(md.getSourceAttributes(), ",\n                              "), lineNoRange);  if (ste.getLineNumber() <= 0 || ste.isNativeMethod() || ste.getFileName() == null || !StringUtils.endsWith(ste.getFileName(), ".java")) continue; if (lineNoRange.contains((Object) Integer.valueOf(lno))) return md; }; System.err.printf("Choices are: [\n  %s\n]\n", StringUtils.join(mds, "\n,  ")); int maxInsns = -1; MethodDefinition maxMd = null; for (MethodDefinition md: mds) { if (md.getBody() != null) { int numInsns = md.getBody().getInstructions().size(); System.out.printf("  - %s [%d insns]\n", md, numInsns); if (numInsns > maxInsns) { maxInsns = numInsns; maxMd = md; }; }; }; return maxMd != null? maxMd: ((!mds.isEmpty())? mds[0]: null); };

