
public static Object getStackMap(Object obj) { com.strobel.assembler.metadata.TypeDefinition td = ProcyonUtil.getTypeDefinition(obj); if (td == null) throw new IllegalArgumentException(String.format("Cannot get TypeDefinition from %s",bsh.Factory.typeof(obj).getName())); Map localsByMethod = new HashMap(); Object[] locals = null; com.strobel.assembler.ir.ConstantPool cp = td.getConstantPool(); com.strobel.assembler.metadata.MethodDefinition md = null; for (md: td.getDeclaredMethods()) { bs = md.getSourceAttributes().typeFilter(com.strobel.assembler.ir.attributes.BlobAttribute.class); if (bs.size()>0) { System.out.println(md); bs = bs[0].getData();  String[] vtNames = new String[]{"Top", "int", "float", "long", "double", "null", "UninitializedThis", "Object", "<uninitialized>"};   dis = new BigEndianDataInputStream(new ByteArrayInputStream(bs)); u2 = dis.readShort(); short ftype = ((short) dis.readByte() & 0x00FF); String frameClass; if (0 <= ftype && ftype <= 63) frameClass = "SameFrame"; else if (64 <= ftype && ftype <= 127) frameClass = "SameLocals1StackItemFrame"; else if (ftype == 247) frameClass = "SameLocals1StackItemFrameExtended"; else if (248 <= ftype && ftype <= 250) frameClass = "ChopFrame"; else if (ftype == 251) frameClass = "SameFrameExtended"; else if (252 <= ftype && ftype <= 254) frameClass = "AppendFrame"; else if (ftype == 255) frameClass = "FullFrame"; else frameClass = "???"; System.err.printf("frameClass = %s\n", frameClass); if (frameClass.equals("FullFrame")) { int offset_delta = dis.readUnsignedShort(); int number_of_locals = dis.readUnsignedShort(); locals = new Object[number_of_locals]; for (int i=0; i<number_of_locals; ++i) { short tag = dis.readUnsignedByte(); int extra = (tag == 7 || tag == 8)? dis.readUnsignedShort(): 0; String typeName = (tag == 7)? cp.getEntry(extra).getName().replace('/', '.'): ""; locals[i] = Triple.of(vtNames[tag], extra, typeName); System.err.printf("  locals[%d]: VerificationTypeInfo: %s:  %s\n", i, vtNames[tag], typeName); }; }; }; localsByMethod.put(md, Arrays.asList(locals)); }; return localsByMethod; }

