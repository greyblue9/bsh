import bsh.ClassIdentifier;

import java.lang.reflect.Field;
import java.lang.reflect.AccessibleObject;
import java.lang.Class;


getfld(o, field_name) { 

  java.lang.Class clazz = null;
  
  if ( o instanceof bsh.ClassIdentifier ) {
    // getfldval( com.example.MyClass, ... )
    //clazz = this.namespace.identifierToClass(o);
    //clazz = (java.lang.Class) o; //o.getTargetClass();
    clazz = java.lang.Class.forName(
      java.lang.String.valueOf(o).substring(
      java.lang.String.valueOf(o).indexOf(":") + 2)
    );
  } else if ( o instanceof java.lang.String) {
    // getfldval( "com.example.MyClass", ... )
    clazz = this.namespace.getClass((java.lang.String)o);
  } else if ( o instanceof java.lang.Class ) {
    // getfldval( com.example.MyClass.class, ... )
    // getfldval( java.lang.Class.forName("com.example.MyClass"), ... )    
    // getfldval( myClassInst.getClass(), ... )    
    clazz = o;
  } else {
    // getfldval( myClassInst, ... )    
    clazz = o.getClass();
  }
  
  if (clazz == null) return null; 
  
  
  java.lang.reflect.Field field = clazz.getDeclaredField(field_name);
  ((java.lang.reflect.AccessibleObject) field).setAccessible(true); 
  
  return field; 
}





public static Pair getfld(Class cls, Object obj) { int ACC_STATIC = Modifier.STATIC; Class ocls = obj.getClass(), c = cls; do { Field[] flds = c.getDeclaredFields(); for (int i=0,len=flds.length; i<len; ++i) { Field fld = flds[i]; int mods = fld.getModifiers(); if ((mods & ACC_STATIC) == 0) continue;  if (! fld.getType().isAssignableFrom(ocls)) continue; fld.setAccessible(true); Object val = fld.get(null); if (val == null) continue; if (val == obj || val.equals(obj)) return Pair.of(fld.getName(), fld); }; } while ((c = c.getSuperclass()) != Object.class && c != null); return ""; };



