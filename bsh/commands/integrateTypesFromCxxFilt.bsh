{ String srcRaw = IOUtils.toString(System.in, java.nio.charset.StandardCharsets.ISO_8859_1); byte[] srcBytes = srcRaw.getBytes(java.nio.charset.StandardCharsets.ISO_8859_1); String src = execCmdFilter(new String[]{ "c++filt" }, srcBytes); Matcher mchr = Pattern.compile("\\(((?:[^()]|\\([^()]*\\))*)\\)\\(((?:[^()]|\\([^()]*\\))*)\\)", Pattern.DOTALL).matcher("");                           mchr.reset(src); lastMatchEnd = 0; sb = new StringBuffer();                       while (mchr.find()) {   String[] ptypes = mchr.group(1).split(", "), pts = mchr.group(2).split(", "), repls = mchr.group(2).split(", "); for (int i=0; i<pts.length && i<ptypes.length && i < repls.length; ++i) { String pt = pts[i], pt1 = pt.substring(0, pt.lastIndexOf(" ") != -1 && pt.charAt(pt.length()-1) != '*'? pt.lastIndexOf(" ") : pt.length()), pt2 = pt.substring(pt1.length()).trim(), repl = (pt2.length() != 0 && Character.isJavaLetter(pt1.charAt(0))) ? String.format("%s %s", ptypes[i], pt2): pt2.length() != 0? String.format("(%s) %s", ptypes[i], pt1): repls[i]; repls[i] = repl; System.err.printf("ptypes[%d] = %s, pts[%d] = (%s%s%s)  ->  %s\n", i, ptypes[i], i, pt1, pt2.isEmpty()? "": ", ", pt2, repl); }; String replStrGroup2 = StringUtils.join(repls, ", "); String wholeReplStr = String.format("(%s)", replStrGroup2);  newSrc = mchr.replaceFirst(wholeReplStr); sb.delete(0, sb.length()).append(newSrc); mchr.reset(newSrc); }; String newSrc = sb.toString();  System.out.println(newSrc); void; };
