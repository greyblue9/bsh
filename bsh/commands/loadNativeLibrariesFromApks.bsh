import java.util.Map.Entry;


public static Object loadNativeLibrariesFromApk(byte[] zipBytes) { File tmpDir = PosixFileInputStream.createTemporaryDirectory(String.format("tmp_libs_%d", org.d6r.PosixFileInputStream.getPid())); Map zm = ZipUtil.mapBytes(zipBytes); for (Entry ent: zm.entrySet().filter("lib/.*arm.*\\.so")) { System.err.println(ent); File libPath = new File(tmpDir, ent.getKey()); File parent = new File(libPath.getParent()); if (!parent.exists()) parent.mkdirs(); FileUtils.writeByteArrayToFile(libPath, ent.getValue()); Thread.currentThread().getContextClassLoader().pathList.nativeLibraryDirectories = ArrayUtils.addAll(Thread.currentThread().getContextClassLoader().pathList.nativeLibraryDirectories, new File[]{ parent }); String libName = Pattern.compile("^(?:.*/)?lib([^/]+)\\.so[^/]*$").matcher(libPath.getName()).replaceAll("$1"); System.err.println(libName); String libPathStr = Thread.currentThread().getContextClassLoader().originalLibraryPath = StringUtils.join(Thread.currentThread().getContextClassLoader().pathList.nativeLibraryDirectories, ":"); System.getProperties().put("java.library.path", libPathStr); System.getProperties().put("jna.boot.library.path", libPathStr); ((HashMap) Reflect.getfldval(Reflect.getfldval(System.getenv(), "map"), "m")).put("LD_LIBRARY_PATH", System.getenv("LD_LIBRARY_PATH") + ":" + parent.getPath()); Reflect.setfldval(Runtime.getRuntime(), "mLibPaths", ArrayUtils.addAll(Reflect.getfldval(Runtime.getRuntime(), "mLibPaths"), new String[]{ parent.getPath().concat("/") })); }; return null; };

