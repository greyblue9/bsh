public static Map mapResources(String apkpath) { File outDir = PosixFileInputStream.createTemporaryDirectory("axml_out"); JadxArgs args = new JadxArgs(outDir.getPath()); jadx.core.dex.nodes.RootNode root = new jadx.core.dex.nodes.RootNode(args); System.err.println("Loading APK input file into RootNode ..."); jadx.core.utils.files.InputFile inFile; root.load(Arrays.asList(inFile = new jadx.core.utils.files.InputFile(new File(apkpath)))); String[] names = null; String str = null; byte[] bytes = null; byte[] lastok = null; ByteArrayInputStream bais = null; List exs = new ArrayList(); names = StringUtils.split(CollectionUtil.toString(ZipUtil.list(apkpath).filter("\\.xml$")).trim(),"\n"); TreeMap zm = new TreeMap(); for (String name: names) { bytes = ZipUtil.toByteArray(apkpath, name); System.out.println(Integer.toHexString(bytes[2])); if (bytes[2] != 8) { System.err.println("literal XML ..."); str = new String(bytes, "UTF-8"); } else { try { bais = new ByteArrayInputStream(bytes); jadx.core.xmlgen.BinaryXMLParser p = new jadx.core.xmlgen.BinaryXMLParser(root); Object cw = p.parse(bais); str = cw.toString(); } catch (Throwable e) { str = new String(bytes); }; }; System.err.println(str); zm.put(name, str.getBytes("UTF-8")); }; return zm; }

