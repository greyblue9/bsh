

public static void mkjar(String[] classNames) { if (classNames == null) classNames = ClassPathUtil.searchClassPath(Pattern.compile(System.getProperty("regex"), Pattern.CASE_INSENSITIVE));   Map zm = new TreeMap(); int count = classNames.length; com.strobel.assembler.metadata.ITypeLoader typeLoader = ProcyonUtil.getTypeLoader(); com.strobel.assembler.metadata.Buffer buf = new com.strobel.assembler.metadata.Buffer(65536); int i=0; for (String className: classNames) { ++i; System.err.printf("Finding class (%4d / %4d): %s ...\n", i, count, className); buf.reset(); if (typeLoader.tryLoadType(ClassInfo.classNameToPath(className), buf)) { int length = buf.size(); buf.position(0); byte[] classBytes = new byte[length]; buf.read(classBytes, 0, length); System.err.printf("  found (%d bytes)\n", length); zm.put(ClassInfo.classNameToPath(className, "class"), classBytes); } };    File outFile = new File(new File(System.getProperty("user.dir")).getCanonicalFile().getAbsoluteFile(), String.format("/data/media/0/classes_output.%s.jar", Long.toString(System.currentTimeMillis(), 32))); File parent = new File(StringUtils.substringBeforeLast(outFile.getPath(), "/")); if ((parent.exists() && parent.isDirectory()) || parent.mkdirs()) { FileUtils.writeByteArrayToFile(outFile, ZipUtil.writeZip(zm)); } else { System.err.printf("Unable to write output file to %s: %s is not a directory or cannot be created.\n", outFile, parent); }; };

