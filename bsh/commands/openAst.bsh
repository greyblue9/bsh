import java.util.Map.Entry;


public static void openAst(com.strobel.decompiler.languages.java.ast.AstNode ast) { List<JavaModifierToken>  modToks = ast.getDescendants().typeFilter(com.strobel.decompiler.languages.java.ast.JavaModifierToken.class);    modPairs = modToks.select(FunctionUtil.bind("return m -> { modList.contains(m._modifier)? Pair.of(m, m._modifier): null; }", "modList", Arrays.asList(javax.lang.model.element.Modifier.PRIVATE, javax.lang.model.element.Modifier.FINAL)));    for (Entry modPair: modPairs) { Object clone = modPair.getKey().clone(); if (clone._modifier == javax.lang.model.element.Modifier.FINAL) { System.err.printf("removing %s in %s ...\n", modPair.getKey()._modifier, modPair.getKey().getParent()); modPair.getKey().remove(); } else if (clone._modifier == javax.lang.model.element.Modifier.PRIVATE) { clone._modifier = javax.lang.model.element.Modifier.PUBLIC; System.err.printf("replacing %s with %s in %s ...\n", modPair.getKey()._modifier, clone._modifier, modPair.getKey().getParent()); modPair.getKey().replaceWith(clone); } else { System.err.printf("Nothing to do: \"%s\" in %s\n", clone._modifier, modPair.getKey().getParent()); }; }; };

