
public static Pair openCtClass(CtClass ct) { ct.defrost(); int acc = (ct.getModifiers() & (~Modifier.PRIVATE) & (~Modifier.PROTECTED) & (~Modifier.FINAL)) | Modifier.PUBLIC; ct.setModifiers(acc); StringBuilder sb = new StringBuilder(76 * 10); sb.append(String.format("%s %s%s\n", Modifier.toString(acc), (acc & Modifier.INTERFACE) == 0? "class ": "", ct.getName())); for (javassist.CtBehavior cb: ct.getDeclaredBehaviors()) { int acc = (cb.getModifiers() & (~Modifier.PRIVATE) & (~Modifier.PROTECTED) & (~Modifier.FINAL)) | Modifier.PUBLIC; cb.setModifiers(acc); String desc = cb.getMethodInfo().getDescriptor(); javassist.bytecode.SignatureAttribute.MethodSignature sig = javassist.bytecode.SignatureAttribute.toMethodSignature(desc); String[] ptypeNames = new org.d6r.SelectTransformer.Default(Functions.toStringFunction()).select(Arrays.asList(sig.getParameterTypes())).toArray(new String[0]);  sb.append(String.format("    %s %s%s(%s)\n", Modifier.toString(acc), cb instanceof CtMethod? cb.getReturnType().getName()+" ": "", cb.getName(), StringUtils.join(ptypeNames, ", ")));  };  return Pair.of(ct, Pair.of(sb.toString(), Pair.of(ClassInfo.classNameToPath(ct.getName(), "class"), toBytecode(ct)))); };

public static Pair openCtClass(CtClass ct, Map zm) { ct.defrost(); int acc = (ct.getModifiers() & (~Modifier.PRIVATE) & (~Modifier.PROTECTED) & (~Modifier.FINAL)) | Modifier.PUBLIC; ct.setModifiers(acc); StringBuilder sb = new StringBuilder(76 * 10); sb.append(String.format("%s %s%s\n", Modifier.toString(acc), (acc & Modifier.INTERFACE) == 0? "class ": "", ct.getName())); for (javassist.CtBehavior cb: ct.getDeclaredBehaviors()) { int acc = (cb.getModifiers() & (~Modifier.PRIVATE) & (~Modifier.PROTECTED) & (~Modifier.FINAL)) | Modifier.PUBLIC; cb.setModifiers(acc);   };  Pair p = Pair.of(ClassInfo.classNameToPath(ct.getName(), "class"), toBytecode(ct)); if (zm != null) zm.put(p.getKey(), p.getValue()); return p; }

