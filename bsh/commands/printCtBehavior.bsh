

public static void printCtBehavior(CtBehavior cb) { opcmap = ConstUtil.constantMap(javassist.bytecode.Opcode.class, -1); CtClass ct = cb.getDeclaringClass(); byte[] code = cb.getMethodInfo2().getCodeAttribute().getCode(); javassist.bytecode.CodeIterator it = cb.getMethodInfo2().getCodeAttribute().iterator(); boolean lasthasnext = true, hasnext = it.hasNext(); boolean end = false;  int last = 0, cur = 0; if (it.hasNext()) { cur = it.next(); };  do { last = cur; cur = end? code.length: it.next(); insnsize = cur - last; insn = Arrays.copyOfRange(code, last, cur); opc = (((int)code[last]) & 0x000000ff); opcName = opcmap.get(Integer.valueOf(opc));  baos=new ByteArrayOutputStream(); HexDump.dump(insn, 0, baos, 0); baos.flush(); int eidx = (opcName.startsWith("INVOKE") || opcName.startsWith("LDC"))? ((((int)code[last + 1]) & 0x000000FF) << 8) | (((int)code[last + 2]) & 0x000000FF): -1; String extra = ""; if (eidx > 0) { if (opcName.startsWith("INVOKE")) { extra = getMethodRefString(ct, eidx); } else { pool = cb.getMethodInfo2().getConstPool(); item = pool.getItem(eidx); if (item != null) { outer: for (fld: item.getClass().getDeclaredFields()) { fld.setAccessible(true); val = fld.get(item); if (val == eidx || fld.getName().equals("index")) continue; if (!(val instanceof Integer)) continue; item2 = pool.getItem(((Integer) val).intValue()); for (fld2: item2.getClass().getDeclaredFields()) { if (fld2.getName().equals("index") || fld2.getName().equals("tag")) continue; fld2.setAccessible(true); System.out.println(fld2.toGenericString()); System.out.println(Debug.ToString(item2)); extra = Debug.ToString(fld2.get(item2)); break outer; } } }; } } else extra = ""; System.out.printf("--------\ninsn: %16s   %s   %3d bytes [%s\n  code offset: @ +%d / +0x%x\n  opcode: %d / %02x\n\n", opcName, extra.length()>0? dumpMembers.colorize(extra, "1;37"): extra, insnsize, baos.toString().replaceAll("(^|\n)[0-9a-f]{8} *", "$1").replaceFirst("[\t ]{3,}", "]  ").replaceAll("\n\\s*$", ""), last, last, opc, opc); lasthasnext = hasnext; } while ((hasnext = it.hasNext()) || (end = (lasthasnext && !hasnext))); }


