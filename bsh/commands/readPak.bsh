import java.util.Map.Entry;
public static List readPak(String path) { LittleEndianDataInputStream is = new LittleEndianDataInputStream(new FileInputStream(new File(path))); ver = is.readInt();  numres = is.readInt();  encoding = is.readByte();  offsets = new ArrayList(); int i = -1;  while (++i < numres) { id = is.readUnsignedShort(); offset = is.readInt(); offsets.add(Pair.of(Integer.valueOf(id), Integer.valueOf(offset))); }; PosixFileInputStream pf = new PosixFileInputStream(path);  public static String readRes(int resIndex) { Entry res = offsets.get(resIndex); Entry nextRes = offsets.get(resIndex+1); long start = ((long)((Integer)res.getValue()).intValue()) & 0xFFFFFFFFL; long nextResStart = ((long)((Integer)nextRes.getValue()).intValue()) & 0xFFFFFFFFL; long size = nextResStart - start; byte[] buf = new byte[(int) size]; pf.seekTo(start); pf.read(buf); str = new String(buf, Charset.defaultCharset()); return str; };  strs = new ArrayList(); for (int i=0; i<offsets.size()-1; i++) {  strs.add(readRes(i)); }; return strs; }

public static Map readPak(byte[] zb) { ByteBuffer bb = ByteBuffer.wrap(zb); bb.order(java.nio.ByteOrder.LITTLE_ENDIAN); int ver = bb.getInt(); int numres = bb.getInt(); Pair[] assets = new Pair[numres]; int enc = ((int)bb.get()) & 0xFF; int idx = -1; while (++idx < numres) { int id = (int) bb.getShort(); int offset = bb.getInt(); bb.mark(); bb.position(bb.position() + 2); int offset2 = bb.getInt(); int strlen = offset2 - offset; bb.position(offset); byte[] buf = new byte[strlen]; bb.get(buf); String str = new String(buf); bb.reset(); assets[idx] = Pair.of(Integer.valueOf(id), str); }; return RealArrayMap.toMap(assets); }


