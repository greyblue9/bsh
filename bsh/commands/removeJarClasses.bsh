import java.util.Map.Entry;


public static ZipFile removeJarClasses(File zfile, Pattern ptrn) { byte[] db = DexRemix.remixDex(zfile.getPath(), ptrn.pattern()); File zdir = new File(org.apache.commons.io.FilenameUtils.removeExtension(zfile.getPath()).concat("/")); if (!zdir.isDirectory()) zdir.mkdirs(); File dfile = new File(zdir, "classes.dex"); FileUtils.writeByteArrayToFile(dfile, db); File bkpf = new File(zdir, org.apache.commons.io.FilenameUtils.removeExtension(zfile.getName()).concat(String.format(".bak.%x.jar", (System.nanoTime() >> 8))));  System.err.printf("Backup: %s (%d)\n", bkpf, bkpf.length());  FileUtils.writeByteArrayToFile(bkpf, FileUtils.readFileToByteArray(zfile)); System.err.printf("Backup: %s (%d)\n", bkpf, bkpf.length()); if (!bkpf.exists() || bkpf.length() != zfile.length()) throw new AssertionError(String.format("size mismatch: %d vs. %d (backup)", zfile.length(), bkpf.length())); Map zm, zm2; Collection keys; (zm = ZipUtil.mapBytes(new ZipFile(zfile))).put("classes.dex", db); zm2 = new TreeMap(); int removed = 0; for (Entry e: zm.entrySet()) { if (ptrn.matcher(e.getKey()).find()) { removed++; System.err.printf("Not adding: %s\n", e.getKey()); continue; }; zm2.put(e.getKey(), e.getValue()); }; System.out.printf("writing: %s\n", zfile); zf = writeZip(zfile, zm2); System.out.printf("done\n%s: %d bytes\n", zfile, zfile.length()); return zf; };

