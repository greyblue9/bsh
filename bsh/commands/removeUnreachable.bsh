
public static void removeUnreachable(com.strobel.decompiler.languages.java.ast.AstNode ast) { for (Class c: Arrays.asList(com.strobel.decompiler.languages.java.ast.ThrowStatement.class, com.strobel.decompiler.languages.java.ast.BreakStatement.class, com.strobel.decompiler.languages.java.ast.ContinueStatement.class)) { stmts = ast.getDescendants().typeFilter(c);  for (stmt: stmts) { parent = stmt.getParent(); if (parent == null) { System.err.println("parent == null"); continue; }; sibs = Arrays.asList(parent.getChildren().toArray()); idx = sibs.indexOf(stmt); size = sibs.size(); throw0 = sibs.typeFilter(c).firstOrDefault(); System.err.println(throw0); tidx = sibs.indexOf(throw0); if (tidx == -1) continue;  List beforet = sibs.subList(0, tidx); System.err.println(beforet);  boolean alwaysReachThrow = (CollectionUtil2.typeFilter(beforet, com.strobel.decompiler.languages.java.ast.BreakStatement.class).isEmpty() && CollectionUtil2.typeFilter(beforet, com.strobel.decompiler.languages.java.ast.ContinueStatement.class).isEmpty()); List toRemove = alwaysReachThrow? sibs.subList(tidx+1, sibs.size()): Arrays.asList(); for (com.strobel.decompiler.languages.java.ast.AstNode node: toRemove) { node.remove(); System.err.printf("removed node: %s\n", node); }; }; }; };

