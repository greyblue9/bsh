
import org.netbeans.modules.classfile.*;

public static String renderClass(ClassIdentifier ci) { 
  Class cls = (Class) ((ClassIdentifier) ci).getTargetClass(); 
  return renderClass(cls);
}

public static String renderClass(Class cls) { 
  return renderClass(cls.getName());
}

public static String renderClass(String clsName) { 
  this.namespace.importPackage("org.netbeans.modules.classfile"); 
  String clsResPath = clsName.replace('.', '/').concat(".class"); 
  Collection resUrls = ClassLoaders.getResources(
    Thread.currentThread().getContextClassLoader(), clsResPath
  ); 
  if (resUrls.size() == 0) { 
    System.err.printf("No class resource named '%s' on classpath", clsResPath); 
    return ""; 
  } 
  URL resUrl = resUrls.iterator().next(); 
  InputStream clsInputStream = resUrl.openConnection().getInputStream(); 
  org.netbeans.modules.classfile.ClassFile cf = new org.netbeans.modules.classfile.ClassFile(clsInputStream); 
  return cf;
}

public static String dumpClass(Object clsObj) { 
  org.netbeans.modules.classfile.ClassFile cf = getNetBeansClassFile(clsObj);
  if (cf == null) { 
    System.err.printf("cf == null");
    return "";
  }
  return dumpClassMethods(cf);
}

public static String dumpClassMethods(org.netbeans.modules.classfile.ClassFile cf) { ArrayList al = new ArrayList(); int midx = -1; Object[] mthds = cf.getMethods().toArray(); for (Object mthd: mthds) { midx += 1; Parameter.ParamIterator pi = new Parameter.ParamIterator(mthd); Parameter[] pars = CollectionUtil.toArray(pi); if (pars == null) { pars = new Parameter[0]; } String mtdSigStr = mthd.getTypeSignature(); if (mtdSigStr != null) { SignatureAttribute.MethodSignature msig = SignatureAttribute.toMethodSignature(mtdSigStr); al.add(Triple.of(mthd, pars, msig)); } }  StringBuilder sb = new StringBuilder(76 * 10); for (Triple info: al.toArray(new Triple[0])) { org.netbeans.modules.classfile.Method mtd = info.getLeft(); int access = mtd.getAccess(); String modStr = Modifier.toString(access); Parameter[] pars = info.getMiddle(); SignatureAttribute.MethodSignature msig = info.getRight(); SignatureAttribute.Type[] types = msig.getParameterTypes(); SignatureAttribute.Type type, returnType = msig.getReturnType(); Parameter par; String mtdName = mtd.getName(); StringBuilder msb = new StringBuilder(200); msb.append("  "); if (modStr.length() > 0) { msb.append(dumpMembers.colorize(modStr, "1;30")); msb.append(' '); } msb.append(dumpMembers.colorize(returnType.jvmTypeName(), "1;36")); msb.append(' '); msb.append(dumpMembers.colorize(mtdName, "1;33"));  msb.append('(');   int i = -1; while (++i < pars.length && (par = pars[i]) != null && (type = types[i]) != null) { String name = par.getName(); String typeName = type.jvmTypeName(); String returnTypeName = returnType.jvmTypeName(); String dispTypeName = dumpMembers.colorize(typeName, "1;32"); String dispReturnTypeName = dumpMembers.colorize(returnTypeName, "1;36"); if (i > 0) msb.append(", "); msb.append(String.format("%s %s", dispTypeName, name)); } msb.append(')'); sb.append(msb.toString()); sb.append('\n'); msb.delete(0, msb.length()); } sb.insert(0, "\n"); return sb.toString(); }


