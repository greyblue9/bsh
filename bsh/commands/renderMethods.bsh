
public static void renderMethods(org.benf.cfr.reader.state.DCCommonState dccs, String clsName) { type = org.benf.cfr.reader.bytecode.analysis.types.JavaRefTypeInstance.create(clsName, dccs); org.benf.cfr.reader.entities.ClassFile cf = dccs.getClassFile(type);  StringBuilder sb = new StringBuilder(76 * 10); for (org.benf.cfr.reader.entities.Method m: cf.getMethods()) { sb = new StringBuilder(76); m.analyse(); org.benf.cfr.reader.bytecode.analysis.types.MethodPrototype proto = m.getMethodPrototype(); sb.append(dumpMembers.colorize(proto.getReturnType() != null? proto.getReturnType().toString(): "void", "1;36")); sb.append(" "); sb.append(dumpMembers.colorize(proto.getName().toString(), "1;33")); sb.append("("); List params = proto.getComputedParameters(); List/*<org.benf.cfr.reader.bytecode.analysis.types.JavaTypeInstance>*/ types = proto.getArgs(); int pidx = 0; for (org.benf.cfr.reader.bytecode.analysis.parse.lvalue.LocalVariable local: params) { if (pidx > 0) sb.append(", "); sb.append(String.format("%s %s", dumpMembers.colorize(types.get(pidx).toString(), "1;32"), local.getName().getStringName())); pidx += 1; } sb.append(")\n"); System.out.print(sb.toString());  }  }

public static void renderMethods(org.benf.cfr.reader.entities.ClassFile cf) { StringBuilder sb = new StringBuilder(76 * 10); for (org.benf.cfr.reader.entities.Method m: cf.getMethods()) { sb = new StringBuilder(76); m.analyse(); org.benf.cfr.reader.bytecode.analysis.types.MethodPrototype proto = m.getMethodPrototype(); sb.append(dumpMembers.colorize(proto.getReturnType() != null? proto.getReturnType().toString(): "void", "1;36")); sb.append(" "); sb.append(dumpMembers.colorize(proto.getName().toString(), "1;33")); sb.append("("); List params = proto.getComputedParameters(); List/*<org.benf.cfr.reader.bytecode.analysis.types.JavaTypeInstance>*/ types = proto.getArgs(); int pidx = 0; for (org.benf.cfr.reader.bytecode.analysis.parse.lvalue.LocalVariable local: params) { if (pidx > 0) sb.append(", "); sb.append(String.format("%s %s", dumpMembers.colorize(types.get(pidx).toString(), "1;32"), local.getName().getStringName())); pidx += 1; } sb.append(")\n"); System.out.print(sb.toString());  }  }

public static String renderMethods(org.benf.cfr.reader.state.DCCommonState dccs, org.benf.cfr.reader.bytecode.analysis.types.JavaRefTypeInstance t) { import org.benf.cfr.reader.entities.*; ClassFile cf = dccs.getClassFile(t);  StringBuilder sb = new StringBuilder(76 * 10); for (org.benf.cfr.reader.entities.Method m: cf.getMethods()) { m.analyse(); org.benf.cfr.reader.bytecode.analysis.types.MethodPrototype proto = m.getMethodPrototype(); sb.append(dumpMembers.colorize(proto.getReturnType() != null? proto.getReturnType().toString(): "void", "1;36")); sb.append(" "); sb.append(dumpMembers.colorize(proto.getName().toString(), "1;33")); sb.append("("); List params = proto.getComputedParameters(); List/*<org.benf.cfr.reader.bytecode.analysis.types.JavaTypeInstance>*/ types = proto.getArgs(); int pidx = 0; for (org.benf.cfr.reader.bytecode.analysis.parse.lvalue.LocalVariable local: params) { if (pidx > 0) sb.append(", "); sb.append(String.format("%s %s", dumpMembers.colorize(types.get(pidx).toString(), "1;32"), local.getName().getStringName())); pidx += 1; } sb.append(")\n");  } return sb.toString(); }

public static String renderMethods(String clsName) { dccs = this.interpreter.get("dccs"); if (dccs == null || dccs == void) { dccs = getDCCS(); loadJarsIntoDCCS(dccs); this.interpreter.set("dccs", dccs); };  import org.benf.cfr.reader.bytecode.analysis.types.*; JavaRefTypeInstance t = JavaRefTypeInstance.create(clsName, dccs); ctype = t.getBindingSupers().getBoundSuperRoute().entrySet().iterator().next().getValue(); if (ctype.equals(org.benf.cfr.reader.bytecode.analysis.types.BindingSuperContainer$Route.IDENTITY)) { ctypeName = "class"; } else if (ctype.equals(org.benf.cfr.reader.bytecode.analysis.types.BindingSuperContainer$Route.INTERFACE)) { ctypeName = "interface"; } else { ctypeName = "abstract class"; }; flags = t.getClassFile().getAccessFlags(); flags.remove(org.benf.cfr.reader.entities.AccessFlag.ACC_SUPER); String strMods = StringUtils.join(flags, " "); String header = String.format("%s%s%s %s %c[0;36m{%c[0m\n", dumpMembers.colorize(strMods, "1;30"), strMods.length() > 0? " ": "", dumpMembers.colorize(ctypeName,"0;36"), dumpMembers.colorize(t.getRawName(),"1;36"), 0x1b, 0x1b); StringBuilder sb = new StringBuilder(76 * 10); sb.append(header); sb.append(renderMethods(dccs, t).replaceAll("^|\n", "\n  ")); sb.append(String.format("\n%c[0;36m}%c[0m\n", 0x1b, 0x1b)); return sb.toString(); }

