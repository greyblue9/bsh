import jadx.core.utils.files.InputFile;
import jadx.core.dex.nodes.RootNode;
import jadx.core.dex.nodes.DexNode;
import jadx.core.dex.nodes.ClassNode;
import jadx.core.dex.nodes.MethodNode;
import jadx.api.IJadxArgs;
import jadx.api.ResourceFile;
import jadx.api.ResourceType;
import jadx.api.JadxDecompiler;
import jadx.core.xmlgen.BinaryXMLParser;

import libcore.io.IoUtils;
import org.apache.commons.io.FileUtils;



public static Map saveResources(byte[] apkBytes) {
  byte[] dexBytes = ZipUtil.toByteArray(apkBytes, "classes.dex");
  // Create temp files (classes.dex, apk)
  File tempDir = PosixFileInputStream.createTemporaryDirectory("decompiler");
  tempDir.deleteOnExit();
  // tempDir.deleteOnExit();
  File tempDex = new File(tempDir, "classes.dex");
  tempDex.createNewFile();
  tempDex.deleteOnExit();
  if (dexBytes == null) dexBytes = new java.math.BigInteger("27071214920827017961295148866757168516919717984211287166003348499838378159747882915615282018374107849950393445774583996773147624928025206383854504046450499246295316807589570345937063057927840186087516963567206636672113189129516027417265630704239236082105742454831076841031272884276557608745631515140741991984956834584851215569848521998773805498678690629332300551007776508880627106701584551232094773366136255001844074067162940461728870426377916004774933122731925076255994415833045850753798027615360041482120446034345768070444548760953944615941001024466103840746960138903195849471445683485210864238976939149065260740153385681350555588502806835295574031068091674005199165954276692667561967536837483973930758919159808").toByteArray();
  FileUtils.writeByteArrayToFile(tempDex, dexBytes);
  File tempZip = new File(tempDir, "temp.apk");
  tempZip.createNewFile();
  tempZip.deleteOnExit();
  FileUtils.writeByteArrayToFile(tempZip, apkBytes);
  
  InputFile inputFile = new InputFile(tempDex);
  IJadxArgs args = new JadxArgs(tempDir.getPath());
  RootNode root = new RootNode(args);
  
  DexNode dexNode = null;
  jadx.core.utils.files.DexFile dexFile = null;
  try {
    dexNode = new DexNode(root, inputFile);
  } catch (Throwable e) {
    dexFile = new jadx.core.utils.files.DexFile(
      inputFile, // jadx.core.utils.files.InputFile inputFile,
      tempDex.getPath(), // String name
      new com.android.dex.Dex(dexBytes) // com.android.dex.Dex dexBuf
    );
    dexNode = new DexNode(
      root, // jadx.core.dex.nodes.RootNode
      dexFile // jadx.core.utils.files.DexFile
    );
  }
  // slow
  // dexNode.loadClasses();
  
  ClassNode[] nodes
    = dexNode.getClasses().toArray(new ClassNode[0]);
  JadxDecompiler dc = new JadxDecompiler(args);
  /* ClassNode classNode = nodes[41];
  MethodNode mtd = classNode.getMethods()[7];
  mtd.load(); */
  Reflect.setfldval(dc, "root", root);
  /* Collection dcClasses = Reflect.getfldval(dc, "classes");
  if (dc.classes == null || dc.classes.size() == 0) {
    javaClasses = dexNode.getClasses().select("m => new jadx.api.JavaClass(m, dc);");
    Reflect.setfldval(dc, "classes", javaClasses);
  } */
  root.load(Arrays.asList(inputFile)); // ?
  Reflect.setfldval(dc, "inputFiles", Arrays.asList(inputFile));
  
  List<ResourceFile> resources = new ArrayList<ResourceFile>();
  List<ZipEntry> zes = StringCollectionUtil.toStringFilter(
    ZipUtil.list(apkBytes), 
    "^(?:AndroidManifest|res/.*)\\.xml$|^resources.arsc$"
  );
  for (ZipEntry zipEntry: zes) {
    String name = zipEntry.getName();
    System.err.printf("Adding resource file: [%s] ...\n", name);
    ResourceType type = 
      (name.equals("AndroidManifest.xml") 
        ? ResourceType.MANIFEST
        : (StringUtils.endsWith(name, ".xml")
            ? ResourceType.XML 
            : ResourceType.ARSC));
    ResourceFile jadxResFile = new ResourceFile(dc, name, type);
    ResourceFile.ZipRef zipRef 
      = new ResourceFile.ZipRef(tempZip, name);
    jadxResFile.setZipRef(zipRef);
    resources.add(jadxResFile);
  }
  root.loadResources(resources);
  dc.resources = resources;
  BinaryXMLParser binxmlp = new BinaryXMLParser(root);
  dc.xmlParser = binxmlp;
  System.err.printf("Saving resources...\n");
  dc.saveResources();
  
  List<File> outputted = findFiles.iterate(
    tempDir.getPath(), 6, ".*\\.(?:arsc|xml)"
  );
  Map zm = new HashMap();
  for (File file: outputted) {
    byte[] bytes = FileUtils.readFileToByteArray(file);
    file.delete();
    String name = file.getPath().substring(
      tempDir.getPath().length() + 1
    );
    zm.put(name, bytes);
  }
  return zm;
}


 