public static Collection searchObject(Object obj, Class searchFor) { q = new ArrayDeque(); visited = new HashSet(); al = new HashSet(); q.offerFirst(obj); dots = 0; while (! q.isEmpty()) { if (dots++ % 10 == 0) System.err.printf("%c[0m.", 0x1b); if (q.peekFirst() == null || q.peekFirst().getClass().isPrimitive() || Number.class.isAssignableFrom(q.peekFirst().getClass())) { q.pollFirst(); continue;   }  Object o = q.pollFirst(); if (visited.contains(o)) continue; visited.add(o); if (searchFor.isAssignableFrom(o.getClass())) { al.add(o); } if (o == null || o.getClass().isPrimitive()) continue; Class cls = o.getClass(); while (cls != null) { for (Field f: cls.getDeclaredFields()) { if (Modifier.isStatic(f.getModifiers())) continue;  f.setAccessible(true); if (f.get(o) == null) continue; if (searchFor.isAssignableFrom(f.get(o).getClass()))  al.add(f.get(o)); if (! f.get(o).getClass().isPrimitive()) { q.offerLast(f.get(o)); } else { continue; } }  cls = cls.getSuperclass();  }  } System.err.printf("\n\n%c[1;%02dm%d found%c[0m\n", 0x1b, al.size() > 0 ? 32: 30, al.size(), 0x1b); return al; }


public static Map searchObject(Object obj, Class searchFor) { int idx = 0; q = new ArrayDeque(); visited = new HashSet(); al = new HashSet(); q.offerFirst(obj); dots = 0; while (! q.isEmpty()) { if (dots++ % 10 == 0) System.err.printf("%c[0m.", 0x1b); if (q.peekFirst() == null || q.peekFirst().getClass().isPrimitive() || Number.class.isAssignableFrom(q.peekFirst().getClass())) { q.pollFirst(); continue;   }  Object o = q.pollFirst(); if (visited.contains(o)) continue; visited.add(o); if (searchFor.isAssignableFrom(o.getClass())) { al.add(Pair.of(System.identityHashCode(o).toString(), o)); } if (o == null || o.getClass().isPrimitive()) continue; Class cls = o.getClass(); while (cls != null) { for (Field f: cls.getDeclaredFields()) { if (Modifier.isStatic(f.getModifiers())) continue;  f.setAccessible(true); if (f.get(o) == null) continue; if (searchFor.isAssignableFrom(f.get(o).getClass())) {  al.add(Pair.of(f.getName()+String.valueOf(++idx), f.get(o))); } if (! f.get(o).getClass().isPrimitive()) { q.offerLast(f.get(o)); } else { continue; } }  cls = cls.getSuperclass();  }  } System.err.printf("\n\n%c[1;%02dm%d found%c[0m\n", 0x1b, al.size() > 0 ? 32: 30, al.size(), 0x1b); return RealArrayMap.toMap(al); }

public static List searchObject(Object obj, int max, boolean getit) { sun.misc.Unsafe u = ClassPathUtil2.getUnsafe(); List objects = new ArrayList(); List al = new ArrayList(); int offs = -4; lastval = -1; val = -1;  while ((offs += 4) <= max) { lastval = val; val = u.getInt(obj, offs); if (val == 0 && lastval.toString().length() == Integer.valueOf(-1772306656).toString().length() && lastval % 8 == 0 && lastval.toString().substring(0,3).equals("-17")) { al.add(offs-4); System.err.printf("\n%4d: %d (next: %d)", offs-4, lastval, val); if (getit) { objects.add(u.getObject(obj, offs - 4)); } } } System.err.println("\n"); return objects; }


public static List searchObject(Object obj, int start, int max, boolean getit) { sun.misc.Unsafe u = ClassPathUtil2.getUnsafe(); List objects = new ArrayList(); List al = new ArrayList(); int offs = (((int)(start / 4.0)) * 4) - 8; lastval = -1; val = -1;  while ((offs += 4) <= max) { lastval = val; val = u.getInt(obj, offs); if (val == 0 && lastval.toString().length() == Integer.valueOf(-1772306656).toString().length() && lastval % 8 == 0 && lastval.toString().substring(0,3).equals("-17")) { al.add(offs-4); System.err.printf("\n%4d: %d (next: %d)", offs-4, lastval, val); if (getit) { objects.add(u.getObject(obj, offs - 4)); } } } System.err.println("\n"); return objects; }


public static List searchObject(Object obj, int start, int max, boolean getit) { sun.misc.Unsafe u = ClassPathUtil2.getUnsafe(); List objects = new ArrayList(); List al = new ArrayList(); int offs = (((int)(start / 4.0)) * 4) - 8; lastval = -1; val = -1;  while ((offs += 4) <= max) { lastval = val; val = u.getInt(obj, offs); if (val == 0 && lastval.toString().length() == Integer.valueOf(-1772306656).toString().length() && lastval % 8 == 0 && lastval.toString().substring(0,4).equals("-177")) { al.add(offs-4); System.err.printf("\n%4d: %d (next: %d)", offs-4, lastval, val); if (getit) { objects.add(u.getObject(obj, offs - 4)); } } } System.err.println("\n"); return objects; }

public static List searchObject(Object obj, int max, boolean getit) { return searchObject(obj, 0, max, getit); }


public static List searchObject(Object obj, int start, int max, boolean getit) { sun.misc.Unsafe u = ClassPathUtil2.getUnsafe(); List objects = new ArrayList(); List al = new ArrayList(); int offs = (((int)(start / 4.0)) * 4) - 8; lastval = -1; val = -1;  while ((offs += 4) <= max) { lastval = val; val = u.getInt(obj, offs); if (val == 0 && lastval.toString().length() == Integer.valueOf(-1772306656).toString().length() && lastval % 8 == 0 && lastval.toString().substring(0,4).matches("-177")) { al.add(offs-4); System.err.printf("\n%4d: %d (next: %d)", offs-4, lastval, val); if (getit) { objects.add(u.getObject(obj, offs - 4)); } } } System.err.println("\n"); return objects; }


public static List searchObject(Object obj, int start, int max, boolean getit) { sun.misc.Unsafe u = ClassPathUtil2.getUnsafe(); List objects = new ArrayList(); List al = new ArrayList(); int offs = (((int)(start / 4.0)) * 4) - 8; lastval = -1; val = -1;  while ((offs += 4) <= max) { lastval = val; val = u.getInt(obj, offs); if (lastval % 4 == 0 && StringUtils.endsWith(Integer.toHexString(Integer.reverseBytes(lastval)), "96")) { al.add(offs-4); System.err.printf("\n%4d: %d (next: %d)", offs-4, lastval, val); if (getit) { objects.add(u.getObject(obj, offs - 4)); } } } System.err.println("\n"); return objects; }


public static List searchObject(Object obj, int start, int max, boolean getit) { sun.misc.Unsafe u = ClassPathUtil2.getUnsafe(); List objects = new ArrayList(); List al = new ArrayList(); int offs = (((int)(start / 4.0)) * 4) - 8; lastval = -1; val = -1;  while ((offs += 4) <= max) { lastval = val; val = u.getInt(obj, offs); if (lastval % 4 == 0 && Integer.toHexString(lastval).length() == 8 && lastval < 0 && Integer.toHexString(lastval).substring(0,2).equals("96")) { al.add(offs-4); System.err.printf("\n%4d: %d (next: %d)", offs-4, lastval, val); if (getit) { objects.add(u.getObject(obj, offs - 4)); } } } System.err.println("\n"); return objects; }


public static List searchObject(int addr, int start, int max, boolean getit) { sun.misc.Unsafe u = ClassPathUtil2.getUnsafe(); List objects = new ArrayList(); List al = new ArrayList(); int offs = addr + ((((int)(start / 4.0)) * 4) - 8); lastval = -1; val = -1;  while ((offs += 4) <= max) { lastval = val; val = u.getInt(null, offs); if (lastval % 4 == 0 && Integer.toHexString(lastval).length() == 8 && lastval < 0 && Integer.toHexString(lastval).substring(0,2).equals("96")) { al.add(offs-4); System.err.printf("\n%4d: %d (next: %d)", offs-4, lastval, val); if (getit) { objects.add(u.getObject(obj, offs - 4)); } } } System.err.println("\n"); return objects; }


