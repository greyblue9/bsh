int lineNumber = -1; com.sun.tools.jdi.ThreadReferenceImpl[] thds = vm.allThreads().toArray(new com.sun.tools.jdi.ThreadReferenceImpl[0]); int i=0; com.sun.tools.jdi.ThreadReferenceImpl thd = thds[i]; com.sun.jdi.ClassLoaderReference ldr = null; com.sun.jdi.StackFrame frame = null; for (i=0; i<thds.length; ++i) { thd = thds[i]; if (!("main".equals(thd.threadGroup().name()))) continue; boolean wasSuspended = thd.isSuspended(); if (!wasSuspended) thd.suspend(); List<StackFrame> frames = thd.frames(); if (frames.isEmpty()) { continue; }; System.err.println(frames);  _frames = frames; for (frame: frames) { lineNumber = frame.location().lineNumber(); if (lineNumber==-1) continue; System.err.printf("Adding breakpoints after %s, line %d\n", frame.location().declaringType(), lineNumber); break outer; }; if (lineNumber != -1) break; }; locs = frame.location().method().allLineLocations().select(FunctionUtil.bind("return m -> { m.lineNumber() >= curLine? m: null; }", "curLine", Long.valueOf(lineNumber))); int lineNumber2 = -1; locs = frame.location().method().allLineLocations().select(FunctionUtil.bind("return m -> { m.lineNumber() >= curLine? m: null; }", "curLine", Long.valueOf(lineNumber))); if (locs.size() > 0) { callingFrames = frames.subList(frames.indexOf(frame)+1, frames.size()); for (frame2_: callingFrames) { lineNumber2 = frame2_.location().lineNumber(); if (lineNumber2==-1) continue; System.err.printf("Adding breakpoints after %s, line %d\n", frame2_.location().declaringType(), lineNumber2); locs2 = frame2_.location().method().allLineLocations().select(FunctionUtil.bind("return m -> { m.lineNumber() >= curLine? m: null; }", "curLine", Long.valueOf(lineNumber2))); List<Breakpoint> bps = new ArrayList(); if (locs2 != null) { for (loc: locs) { bp = vm.eventRequestManagerImpl().createBreakpointRequest(loc); bp.enable(); bps.add(bp); } };  if (locs2 != null) { for (loc: locs2) { bp = vm.eventRequestManagerImpl().createBreakpointRequest(loc); bp.enable(); bps.add(bp); } }; } }; for  (thd: thds) {  while(thd.isSuspended()) { thd.resume(); };    }