public static void text2html_fromEx(String path) { char[] punctuation = { '.', ':', '!' }; (str=FileUtils.readFileToString(new File(path)).replaceAll("//\\s*[0-9](\\s+)", "\n$1").replaceAll("Decompiling Java Bytecode: Problems, Traps and Pitfalls\\s*[0-9]*\\s*", "\n\n").replaceAll("(?:[0-9][0-9]*\\s\\s*|)Jerome\\s*Miecznikowski\\s*and\\s*Laurie\\s*Hendren", "\n")).length(); parts = StringUtils.split(str, "\n\n   "); parts2 = new ArrayList(); StringBuilder sb = new StringBuilder(); for (String part: parts) { part = part.trim().replace("a**", "\'"); if ((part.length() < 200 && sb.length() < 200) || Character.isLowerCase(part.charAt(0)) || (sb.length() > 0 && ArrayUtils.indexOf(punctuation, sb.charAt(sb.length()-1)) == -1)) { if (sb.length()>0) sb.append(" "); sb.append(part); continue; }; parts2.add(sb.toString()); sb.setLength(0); sb.append(part); }; Matcher NL_INDENT_MCHR = Pattern.compile( "([^ \n])(  +)([^ \n])", Pattern.DOTALL | Pattern.MULTILINE | Pattern.UNIX_LINES ).matcher(""); List parts3 = new ArrayList(); for (String text: parts2) { String t0 = text.replace(" ", ""), t1 = t0; for (char c: "<>!@#$^&*()[];:|_+-={}*.\"\'/\\%?,".toCharArray()) { t1 = t1.replace(String.format("%c", c), ""); } float sfrac = ((float)(t0.length() - t1.length())) / ((float)t0.length()); if (sfrac <= 0.090) { parts3.add("<p no-hljs=\"true\">\n"); parts3.add(StringEscapeUtils.escapeHtml4(text)); parts3.add("</p>\n"); } else { parts3.add("<pre>\n"); parts3.add("\n" + NL_INDENT_MCHR.reset(text).replaceAll("$1\n$2$3")); parts3.add("\n</pre>\n"); }; }; String outHtml = StringUtils.join(parts3, ""); writeFile("/data/media/0/David/www/test.html", outHtml.replaceAll("((?:^|\n|>|\\.\\s+)+)([0-9]+(?: ?\\. ?[0-9]+)*) ([A-Z][^ ]*(?:\\s+[^ <>]*[^. <>])*)\\s+([A-Z]+[^ ]* [a-z])", "$1\n</p>\n<h2>$2: $3</h2>\n\n<p>$4\n").replaceAll("(\\s*)//\\s*[0-9]+", "\n$1").replaceAll("(public [^<]*)</p>[^<]*(<pre[^>]*>)", "</p>\n$2\n$1\n")); PosixFileInputStream.pexecSync("fixup_www_html", "/data/media/0/David/www/test.html");  };