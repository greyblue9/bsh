
public static Object visualizeException(Throwable ex) { int start=0, end=0, count=0, length=0, regionStart=0, regionLength=0, regionEnd=0;  Throwable t = Reflector.getRootCause(ex); Matcher mchr = Pattern.compile("[a-zA-Z0-9_$.]*Exception[: ]*length=(-?[0-9]+); regionStart=(-?[0-9]+); regionLength=(-?[0-9]+)").matcher(t.toString()); if (mchr.find()) { count = Integer.parseInt(mchr.group(1), 10); regionStart = start = Integer.parseInt(mchr.group(2), 10); regionLength = length = Integer.parseInt(mchr.group(3), 10); regionEnd = end = (regionStart + regionLength);  StringBuilder sb = new StringBuilder(512).append(String.format("\n\n%s\n\nsb.length(): %d\n  sb.\u001b[1;33msubSequence\u001b[0m(\u001b[1;30mstart:\u001b[1;32m %d\u001b[0m, \u001b[1;30mend:\u001b[1;31m %d\u001b[0m);\n", mchr.group(0), count, start, end)); String diagram = new StringBuilder(StringUtils.repeat(".", count)).replace(start, start+1, (overhead = "\u001b[1;32m[\u001b[0m")).replace((end >= start? end + overhead.length(): end), (end+1 >= start? end+1 + overhead.length(): end+1), "\u001b[1;31m]\u001b[0m").toString(); sb.append(String.format("\n  %s\n\n", diagram)); return Pair.of(Quad.of(count, start, end, length), sb.toString()); }; return t.detailMessage != null? t.detailMessage: t.getClass().getName(); };


