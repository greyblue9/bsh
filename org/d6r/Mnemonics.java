package org.d6r;

class Mnemonics {
  
  public static final String[] ops;
  
  static {
    ops = new String[256];
    ops[1] = "move";
    ops[2] = "move/from16";
    ops[3] = "move/16";
    ops[4] = "move-wide";
    ops[5] = "move-wide/from16";
    ops[6] = "move-wide/16";
    ops[7] = "move-object";
    ops[8] = "move-object/from16";
    ops[9] = "move-object/16";
    ops[10] = "move-result";
    ops[11] = "move-result-wide";
    ops[12] = "move-result-object";
    ops[13] = "move-exception";
    ops[14] = "return-void";
    ops[15] = "return";
    ops[16] = "return-wide";
    ops[17] = "return-object";
    ops[18] = "const/4";
    ops[19] = "const/16";
    ops[20] = "const";
    ops[21] = "const/high16";
    ops[22] = "const-wide/16";
    ops[23] = "const-wide/32";
    ops[24] = "const-wide";
    ops[25] = "const-wide/high16";
    ops[26] = "const-string";
    ops[27] = "const-string/jumbo";
    ops[28] = "const-class";
    ops[29] = "monitor-enter";
    ops[30] = "monitor-exit";
    ops[31] = "check-cast";
    ops[32] = "instance-of";
    ops[33] = "array-length";
    ops[34] = "new-instance";
    ops[35] = "new-array";
    ops[36] = "filled-new-array";
    ops[37] = "filled-new-array/range";
    ops[38] = "fill-array-data";
    ops[39] = "throw";
    ops[40] = "goto";
    ops[41] = "goto/16";
    ops[42] = "goto/32";
    ops[43] = "packed-switch";
    ops[44] = "sparse-switch";
    ops[45] = "cmpl-float";
    ops[46] = "cmpg-float";
    ops[47] = "cmpl-double";
    ops[48] = "cmpg-double";
    ops[49] = "cmp-long";
    ops[50] = "if-eq";
    ops[51] = "if-ne";
    ops[52] = "if-lt";
    ops[53] = "if-ge";
    ops[54] = "if-gt";
    ops[55] = "if-le";
    ops[56] = "if-eqz";
    ops[57] = "if-nez";
    ops[58] = "if-ltz";
    ops[59] = "if-gez";
    ops[60] = "if-gtz";
    ops[61] = "if-lez";
    ops[62] = "unused-3e";
    ops[63] = "unused-3f";
    ops[64] = "unused-40";
    ops[65] = "unused-41";
    ops[66] = "unused-42";
    ops[67] = "unused-43";
    ops[68] = "aget";
    ops[69] = "aget-wide";
    ops[70] = "aget-object";
    ops[71] = "aget-boolean";
    ops[72] = "aget-byte";
    ops[73] = "aget-char";
    ops[74] = "aget-short";
    ops[75] = "aput";
    ops[76] = "aput-wide";
    ops[77] = "aput-object";
    ops[78] = "aput-boolean";
    ops[79] = "aput-byte";
    ops[80] = "aput-char";
    ops[81] = "aput-short";
    ops[82] = "iget";
    ops[83] = "iget-wide";
    ops[84] = "iget-object";
    ops[85] = "iget-boolean";
    ops[86] = "iget-byte";
    ops[87] = "iget-char";
    ops[88] = "iget-short";
    ops[89] = "iput";
    ops[90] = "iput-wide";
    ops[91] = "iput-object";
    ops[92] = "iput-boolean";
    ops[93] = "iput-byte";
    ops[94] = "iput-char";
    ops[95] = "iput-short";
    ops[96] = "sget";
    ops[97] = "sget-wide";
    ops[98] = "sget-object";
    ops[99] = "sget-boolean";
    ops[100] = "sget-byte";
    ops[101] = "sget-char";
    ops[102] = "sget-short";
    ops[103] = "sput";
    ops[104] = "sput-wide";
    ops[105] = "sput-object";
    ops[106] = "sput-boolean";
    ops[107] = "sput-byte";
    ops[108] = "sput-char";
    ops[109] = "sput-short";
    ops[110] = "invoke-virtual";
    ops[111] = "invoke-super";
    ops[112] = "invoke-direct";
    ops[113] = "invoke-static";
    ops[114] = "invoke-interface";
    ops[115] = "unused-73";
    ops[116] = "invoke-virtual/range";
    ops[117] = "invoke-super/range";
    ops[118] = "invoke-direct/range";
    ops[119] = "invoke-static/range";
    ops[120] = "invoke-interface/range";
    ops[121] = "unused-79";
    ops[122] = "unused-7a";
    ops[123] = "neg-int";
    ops[124] = "not-int";
    ops[125] = "neg-long";
    ops[126] = "not-long";
    ops[127] = "neg-float";
    ops[128] = "neg-double";
    ops[129] = "int-to-long";
    ops[130] = "int-to-float";
    ops[131] = "int-to-double";
    ops[132] = "long-to-int";
    ops[133] = "long-to-float";
    ops[134] = "long-to-double";
    ops[135] = "float-to-int";
    ops[136] = "float-to-long";
    ops[137] = "float-to-double";
    ops[138] = "double-to-int";
    ops[139] = "double-to-long";
    ops[140] = "double-to-float";
    ops[141] = "int-to-byte";
    ops[142] = "int-to-char";
    ops[143] = "int-to-short";
    ops[144] = "add-int";
    ops[145] = "sub-int";
    ops[146] = "mul-int";
    ops[147] = "div-int";
    ops[148] = "rem-int";
    ops[149] = "and-int";
    ops[150] = "or-int";
    ops[151] = "xor-int";
    ops[152] = "shl-int";
    ops[153] = "shr-int";
    ops[154] = "ushr-int";
    ops[155] = "add-long";
    ops[156] = "sub-long";
    ops[157] = "mul-long";
    ops[158] = "div-long";
    ops[159] = "rem-long";
    ops[160] = "and-long";
    ops[161] = "or-long";
    ops[162] = "xor-long";
    ops[163] = "shl-long";
    ops[164] = "shr-long";
    ops[165] = "ushr-long";
    ops[166] = "add-float";
    ops[167] = "sub-float";
    ops[168] = "mul-float";
    ops[169] = "div-float";
    ops[170] = "rem-float";
    ops[171] = "add-double";
    ops[172] = "sub-double";
    ops[173] = "mul-double";
    ops[174] = "div-double";
    ops[175] = "rem-double";
    ops[176] = "add-int/2addr";
    ops[177] = "sub-int/2addr";
    ops[178] = "mul-int/2addr";
    ops[179] = "div-int/2addr";
    ops[180] = "rem-int/2addr";
    ops[181] = "and-int/2addr";
    ops[182] = "or-int/2addr";
    ops[183] = "xor-int/2addr";
    ops[184] = "shl-int/2addr";
    ops[185] = "shr-int/2addr";
    ops[186] = "ushr-int/2addr";
    ops[187] = "add-long/2addr";
    ops[188] = "sub-long/2addr";
    ops[189] = "mul-long/2addr";
    ops[190] = "div-long/2addr";
    ops[191] = "rem-long/2addr";
    ops[192] = "and-long/2addr";
    ops[193] = "or-long/2addr";
    ops[194] = "xor-long/2addr";
    ops[195] = "shl-long/2addr";
    ops[196] = "shr-long/2addr";
    ops[197] = "ushr-long/2addr";
    ops[198] = "add-float/2addr";
    ops[199] = "sub-float/2addr";
    ops[200] = "mul-float/2addr";
    ops[201] = "div-float/2addr";
    ops[202] = "rem-float/2addr";
    ops[203] = "add-double/2addr";
    ops[204] = "sub-double/2addr";
    ops[205] = "mul-double/2addr";
    ops[206] = "div-double/2addr";
    ops[207] = "rem-double/2addr";
    ops[208] = "add-int/lit16";
    ops[209] = "rsub-int";
    ops[210] = "mul-int/lit16";
    ops[211] = "div-int/lit16";
    ops[212] = "rem-int/lit16";
    ops[213] = "and-int/lit16";
    ops[214] = "or-int/lit16";
    ops[215] = "xor-int/lit16";
    ops[216] = "add-int/lit8";
    ops[217] = "rsub-int/lit8";
    ops[218] = "mul-int/lit8";
    ops[219] = "div-int/lit8";
    ops[220] = "rem-int/lit8";
    ops[221] = "and-int/lit8";
    ops[222] = "or-int/lit8";
    ops[223] = "xor-int/lit8";
    ops[224] = "shl-int/lit8";
    ops[225] = "shr-int/lit8";
    ops[226] = "ushr-int/lit8";
    ops[227] = "+iget-volatile";
    ops[228] = "+iput-volatile";
    ops[229] = "+sget-volatile";
    ops[230] = "+sput-volatile";
    ops[231] = "+iget-object-volatile";
    ops[232] = "+iget-wide-volatile";
    ops[233] = "+iput-wide-volatile";
    ops[234] = "+sget-wide-volatile";
    ops[235] = "+sput-wide-volatile";
    ops[236] = "^breakpoint";
    ops[237] = "^throw-verification-error";
    ops[238] = "+execute-inline";
    ops[239] = "+execute-inline/range";
    ops[240] = "+invoke-object-init/range";
    ops[241] = "+return-void-barrier";
    ops[242] = "+iget-quick";
    ops[243] = "+iget-wide-quick";
    ops[244] = "+iget-object-quick";
    ops[245] = "+iput-quick";
    ops[246] = "+iput-wide-quick";
    ops[247] = "+iput-object-quick";
    ops[248] = "+invoke-virtual-quick";
    ops[249] = "+invoke-virtual-quick/range";
    ops[250] = "+invoke-super-quick";
    ops[251] = "+invoke-super-quick/range";
    ops[252] = "+iput-object-volatile";
    ops[253] = "+sget-object-volatile";
    ops[254] = "+sput-object-volatile";
    ops[255] = "unused-ff";
  }
  
  public static String opcodeName(int opcode) {
    if (opcode >= ops.length) {
      throw new IllegalArgumentException(String.format(
        "opcode >= %d", ops.length
      ));
    }
    return ops[opcode];
  }
}

